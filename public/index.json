


[{"content":"","externalUrl":"https://n9o.xyz","permalink":"/users/e8b2eb823290677fbba3390d5cef2c35/","section":"用户列表","summary":"","title":"n9o.xyz","type":"users"},{"content":"\rBlowfish 包含了大量的特性功能。\rBlowfish 的目标是开发一个简单且轻量级的主题。 该主题是 Congo 的一个分支，并进行了大量扩展。\nTailwind CSS 3.0 #\rTailwind CSS 是 Blowfish 的核心，当前版本包含了最新的Tailwind CSS version 3。 Tailwind CSS 带来了性能优化，并提供了一些出色的新的 CSS 特性。\n多语言支持 #\r这是一个高频需求，Blowfish 现在支持多语言！ 如果你使用多语言发布你的内容，网站将会构建包含所有可用翻译的版本。\n🇬🇧 🇩🇪 🇫🇷 🇪🇸 🇨🇳 🇧🇷 🇹🇷 🇧🇩\r感谢社区的贡献，目前 Blowfish 已经翻译成三十种语言，并且随着时间的推移还会支持更多。 顺便一提，欢迎你为支持新语言提交 PR。\n支持 RTL 语言 #\r新版本的Tailwind和多语言特性可以支持 RTL 语言。\n启用 RTL 后，整个网站将会从右到左重新生成内容。主题中的所有元素都会重新风格化，以适应这种模式，有助于 RTL 语言者。\nRTL 是基于单独语言控制的，所以你可以在项目中通过支持多语言来混合使用 RTL 和 LTR，主题会相应做出适配。\n自动调整图片大小 #\rBlowfish 2.0版本的重大变化是增加了自动调整图片大小的功能。基于 Hugo Pipes 提供的能力，实现了 Markdown 中的图片自动缩放到不同尺寸的功能。同时 Blowfish 2.0 还支持了 HTML srcset 以实现响应式图像，这能够为访问者优化图片大小。\n\u0026lt;!-- Markdown: ![My image](image.jpg) --\u0026gt; \u0026lt;img srcset=\u0026#34; /image_320x0_resize_q75_box.jpg 320w, /image_635x0_resize_q75_box.jpg 635w, /image_1024x0_resize_q75_box.jpg 1024w\u0026#34; src=\u0026#34;/image_635x0_resize_q75_box.jpg\u0026#34; alt=\u0026#34;My image\u0026#34; /\u0026gt; 当然这一切都不需要你做任何改动！只需要在 Markdown 中插入标准的图片元素，Blowfish 主题会自动帮你完成这些。\n如果你想要图片变得更可控一些，你可以使用短代码 figure 。 figure 已经被完全重写，用于提供类似调整大小的功能优势。\n站点搜索 #\r基于 Fuse.js 提供的模糊搜索，访问者可以快速轻松地找到想要的内容。所有的模糊搜索都在客户端完成，不需要服务端做任何配置，同时保证了搜索的执行速度。只需要你在网站配置中启用这个功能就可以运行！哦，它甚至还支持全键盘导航！\n目录 #\r这也是一个高频的需求，Blowfish 现在支持在文章内容页面中使用目录。你可以在本页面看到它的实际效果。目录完全是响应式的，并且会在不同屏幕分辨率下进行自动调整。\n目录可以给予全局或者每篇文章，也可以使用标准的 Hugo 配置来完全定制化，允许你根据自己的项目调整。\n可访问性改进 #\r这个版本是至今为止最易访问的！Blowfish 不仅为更多项目提供了 ARIA 描述，还简单地调整了某些文本元素的对比度。\n不仅如此，Blowfish 2.0 引入了 “跳转到内容” 和 “滚动到顶部” 的功能，使得导航更加便捷。你甚至可以仅用键盘快捷键来使用像搜索这样的功能，不需要使用鼠标哦~\n新功能图片大小调节还提供了对 alt 和 title 元素的完全控制，为所有访问者提供一个无障碍的体验。\n更多更多 #\r当然还有无数其他的功能等待你的探索。例如在文章和列表页面显示分类、使用 headline 作者参数来定制你的主页，还有使用改进 JSON-LD 结构化数据，从而进一步优化了 SEO 性能等等。\n结语 #\r欢迎来尝试和探索强大而轻量的 Blowfish 2.0，打造优雅、个性化的创作之旅！\n如果你对 Blowfish 有更加创意的想法，欢迎随时提交，期待与你共同营造 Blowfish 的开源文化！\n","externalUrl":null,"permalink":"/docs/welcome/","section":"文档","summary":"","title":"欢迎来到 Blowfish","type":"docs"},{"content":"","externalUrl":"https://madoke.org/","permalink":"/users/96d3e57dcc931de55cc23a825d40be2c/","section":"用户列表","summary":"","title":"madoke.org","type":"users"},{"content":"如果想快速上手，可以按照标准的 Hugo 快速启动 文档。\n更详细的安装如下，更新主题的教程也可以看此文档。\n前言 #\r本文将一步一步指导你学会使用 Hugo 和 Blowfish。本文中提到的大多数依赖项都可以在任意你想使用的平台中使用和安装。\n安装 Hugo #\r如果你之前没有使用过 Hugo，你首先需要了解在本地机器安装 Hugo。你可以通过运行命令 hugo version 来检查是否安装完成。\n确保你使用 Hugo 0.87.0 或更高的版本，Blowfish 主题中使用了最新的 Hugo 特性。\r你可以在 Hugo 文档 中找到不同平台更加详细的安装指南。\n使用 Blowfish-Tools 工具安装 (推荐) #\r我们刚刚推出了一个 CLI 工具，帮助你首次使用 Blowfish。该工具将会为你创建一个新的 Hugo 项目、安装 Blowfish 主题并设置配置文件。但目前该工具仍处于测试阶段，如果遇到任何问题，请随时提交 issues。\n使用 npm 包或其他的包管理器，在全局环境中安装 CLI：\nnpx blowfish-tools 或者\nnpm i -g blowfish-tools 然后运行 blowfish-tools 命令，它将引导你完成创建和配置用例。\nblowfish-tools 你也可以运行 blowfish-tools new 命令来创建一个新的 Hugo 项目，并且一次性地安装主题。查看 CLI 帮助以获取更多信息。\nblowfish-tools new mynewsite 下面是一个简短的视频，介绍了如何使用 CLI 工具快速构建 Blowfish：\n无需 CLI 的安装 #\r创建新站点 #\r运行 hugo new site mywebsite 命令，可以在mywebsite目录下创建一个新的 Hugo 站点。\n下面会以 mywebsite 为例展开说明。当然你完全可以使用任何你喜欢的目录名称，但在阅读下面的内容时，请记得将mywebsite替换为此。\n下载 Blowfish 主题 #\r有多种方法可以将 Blowfish 主题安装在 Hugo 站点中。下面我们由易到难逐一介绍：\n使用 Git 子模块安装 (推荐) 使用 Hugo 模块安装 手动文件复制 如果你不确定用哪一个，请直接选择 Git 子模块的方式。\n使用 Git 子模块安装 #\r这个方法可以保证主题简单且快速地安装和更新。除了 Hugo 和 Go，你还需要确保本地机器安装了 Git。\n进入你刚才创建的网站目录 mywebsite，初始化一个新的 git 仓库并将 Blowfish 添加为子模块。\ncd mywebsite git init git submodule add -b main https://github.com/nunocoracao/blowfish.git themes/blowfish 然后 设置主题的配置文件。\n使用 Hugo 模板安装 #\r这种方法是使用 Hugo 来管理你的主题，Hugo 使用 Go 来初始化和管理模块，所以首先需要确保已经安装了go。\n下载 并安装 Go。你可以使用 go version 命令来检查是否安装。\n确保你使用 Go 1.12 或 更高的版本，Hugo 需要这个版本才能加载模块。\r在你刚才创建的网站目录 mywebsite下，为你的网站初始化模块：\n# 如果你在 Github 上管理你的项目 hugo mod init github.com/\u0026lt;username\u0026gt;/\u0026lt;repo-name\u0026gt; # 如果你在本地管理你的项目 hugo mod init my-project 创建一个新文件 config/_default/module.toml，并添加下面的内容来配置主题：\n[[imports]] disable = false path = \u0026#34;github.com/nunocoracao/blowfish/v2\u0026#34; 使用hugo server 命令后，主题将会自动下载。\n然后 设置主题的配置文件.\n手动复制文件 #\r下载最新的主题源码。\n从 Github 下载\r解压缩, 并将文件夹重命名为 blowfish，将其移动到你的 Hugo 项目根目录下的 themes/ 目录中。\n然后 设置主题的配置文件.\n设置主题的配置文件 #\r在你的网站根目录中，删除 Hugo 自动生成的 hugo.toml 文件。从主题中复制 *.toml 文件，粘贴到 config/_default/ 目录中。这将确保你的主题设置准确无误，在此基础上你能够轻松地自定义主题。\n注意: 如果项目中已经存在 module.toml 文件，请不要覆盖它！\r根据你安装主题的不同方式，你可以在以下地方找到主题的配置文件：\nHugo 模块: 在 Hugo 的缓存目录, 或者从 Github 下载副本 from GitHub Git 子模块 或 本地复制文件: themes/blowfish/config/_default 一旦你复制了这些文件，你的 config 目录看起来应该是这样：\nconfig/_default/ ├─ hugo.toml ├─ languages.en.toml ├─ markup.toml ├─ menus.en.toml ├─ module.toml # 通过 Hugo 模块安装 └─ params.toml 重要: 如果你没有使用 Hugo 模块安装 Blowfish，那么你必须在 hugo.toml 文件中添加 theme = \u0026quot;blowfish\u0026quot;。\r下一步 #\r基本的 Blowfish 安装已经完成。继续阅读 入门指南，了解更多关于主题配置的内容。\n更新主题 #\r经常会有 新版本 的主题发布，这些版本主要是修复 bug 和添加新功能。如果想要用到新版本的功能，那么你需要更新网站的主题。\n如何更新主题取决于最初安装主题时选择的安装方式，具体如下：\n使用 Git 子模块安装 使用 Hugo 模块安装 手动文件复制 使用 git 更新 #\rGit 子模块的方式，可以使用 git 命令更新。只需执行以下命令，最新版的主题将会下载到你的本地仓库中：\ngit submodule update --remote --merge 一旦子模块更新完毕，请检查你的确实是否一切正常。\n使用 Hugo 更新 #\rHugo 更新也十分容易。只需要进入网站根目录，并执行以下命令即可：\nhugo mod get -u Hugo 将自动更新项目中所需的任何模块。它通过检查 module.toml 和 go.mod 来实现的。如果你在更新过程中遇到任何问题，请确保这两个文件是正常配置的。\n重建完毕后，请检查网站是否一切正常。\n手动更新 #\r手动更新 Blowfish 需要下载主题的最新副本，并替换项目中的旧版本。\n注意：在手动替换过程中，你对主题文件中所做的任何修改都会丢失。\r下载主题最新版本的源码。\n从 Github 下载\r解压缩, 将文件夹重命名为 blowfish，并移动到根目录 themes/ 目录下。你需要覆盖旧版以替换所有的主题文件。\n重建站点，并检查网站是否一切正常。\n","externalUrl":null,"permalink":"/docs/installation/","section":"文档","summary":"","title":"安装和配置","type":"docs"},{"content":"","externalUrl":"https://code-chimp.com","permalink":"/users/4bc0917e04c4859cedb32a48bff27846/","section":"用户列表","summary":"","title":"code-chimp.com","type":"users"},{"content":"\r本节内容需要已经阅读了 安装 Blowfish 主题。\r我们刚刚推出了一个 CLI 工具，用来帮助你快速开始 Blowfish。 它将帮助你安装和配置 Blowfish 主题。 可以使用以下命令全局安装 CLI 工具：\nnpx blowfish-tools Blowfish 中的配置文件中包含了主题需要的所有可能的设置选项。但默认情况下大多数设置都是被注释的，你只需要取消注释就可以激活或者修改设定选项。\n基础设置 #\r在刚刚安装完成，创建内容之前，有几个设置需要关注。从 hugo.toml 开始，设置 baseURL 和 languageCode 参数。languageCode参数是用来指定你创作内容的主要语言。\n# config/_default/hugo.toml baseURL = \u0026#34;https://your_domain.com/\u0026#34; languageCode = \u0026#34;en\u0026#34; 下一步是设置语言。尽管 Blowfish 支持多语言，但是 hugo.toml 只能配置一个主语言。\n在 config/_default 文件夹中找到 languages.en.toml。如果你的主语言是英语，你可以直接使用此文件。否则需要重命名为主语言对应的文件名。例如，如果主语言是法语，那么需要将文件命名为 languages.fr.toml。\n注意：语言配置文件名中的语言代码需要与 hugo.toml 中 languageCode 相匹配。\r# config/_default/languages.en.toml title = \u0026#34;My awesome website\u0026#34; [params.author] name = \u0026#34;My name\u0026#34; image = \u0026#34;img/author.jpg\u0026#34; headline = \u0026#34;A generally awesome human\u0026#34; bio = \u0026#34;A little bit about me\u0026#34; links = [ { twitter = \u0026#34;https://twitter.com/username\u0026#34; } ] [params.author] 属性决定了作者信息的展示方式。 作者的图片信息应该放在 assets/ 文件夹中。作者相关的链接将会按照排列顺序依次展示。\n如果你还需要额外属性，在配置部分会有详细说明。\n颜色方案 #\rBlowfish 主题中包含了数个颜色方案，这些方案可以快速使用。如果需要修改方案，只需要简单的设置 colorScheme 参数即可。colorScheme 可选的值有blowfish （默认）、avocado、fire、ocean、forest、princess、neon、bloody、terminal、marvel、noir、autumn、congo和slate。\n# config/_default/params.toml colorScheme = \u0026#34;blowfish\u0026#34; Blowfish 定义了一种由三种主色调构成的配色方案，每种主色调包含了10种子色调，10个色调是借鉴 Tailwind 中的定义。Blowfish 中定义了多个预置的三色主题，以便在整个主题中使用。\nBlowfish（默认） #\rAvocado #\rFire #\rOcean #\rForest #\rPrincess #\rNeon #\rBloody #\rTerminal #\rMarvel #\rNoir #\rAutumn #\rCongo #\rSlate #\r这些是内置的配色方案，你也可以去自定义这一部分，请参阅 高级自定义 。\n整理内容 #\r默认情况下， Blowfish 不强制你使用特定类型的内容。这样你可以随意自定义你想要的内容。你可能喜欢用作静态网站页面、博客帖子，或作为作品集中的某个项目。\n这是基本 Blowfish 项目的快速概览。所有内容都放在 content 文件夹中：\n. ├── assets │ └── img │ └── author.jpg ├── config │ └── _default ├── content │ ├── _index.md │ ├── about.md │ └── posts │ ├── _index.md │ ├── first-post.md │ └── another-post │ ├── aardvark.jpg │ └── index.md └── themes └── blowfish 一定要熟练掌握在 Hugo 中组织你想要的内容，此主题也旨在充分利用 Hugo 中页面页面捆绑的逻辑。请阅读 Hugo 官方文档 以获取更多内容。\nBlowfish 在分类方法上面也非常灵活。有的人喜欢使用标签（tags）和类别（categories）来分组内容，而有的人喜欢用话题（topics）。\nHugo 默认是使用帖子、标签和类别，这三种可以开箱即用的。但如果你希望自定义，那么可以创建 taxonomies.toml 配置文件来实现：\n# config/_default/taxonomies.toml topic = \u0026#34;topics\u0026#34; 这将把默认的标签和分类替换成话题。有关 Hugo 中命名分类法的更多内容，可以参考 Hugo 分类方法。\n当你创建了一个新的分类法时，需要调整网站上的导航链接，以确保新分类可以指向正确的内容，下面会详细介绍。\n菜单 #\rBlowfish 有两个可以定制的菜单，以此来适配网站中的内容和布局。main菜单出现在网站头部，footer菜单出现在页面底部和版权声明上方。\n这两个菜单都是配置在 menus.en.toml 文件中。与语言配置文件类似，如果你希望使用另一种语言，请重命名这个文件并将 en 替换为你所希望的语言代码。\n# config/_default/menus.toml [[main]] name = \u0026#34;Blog\u0026#34; pageRef = \u0026#34;posts\u0026#34; weight = 10 [[main]] name = \u0026#34;Topics\u0026#34; pageRef = \u0026#34;topics\u0026#34; weight = 20 [[main]] pre = \u0026#34;github\u0026#34; name = \u0026#34;GitHub\u0026#34; url = \u0026#34;https://github.com/nunocoracao/blowfish\u0026#34; weight = 30 [[main]] identifier = \u0026#34;github2\u0026#34; pre = \u0026#34;github\u0026#34; url = \u0026#34;https://github.com/nunocoracao/blowfish\u0026#34; weight = 40 [[footer]] name = \u0026#34;Privacy\u0026#34; url = \u0026#34;https://external-link\u0026#34; name 参数用于指定菜单中的文本。你还可以选择性的提供一个 title 标题，它将会被填充到链接的 HTML 代码的 title 属性中。\npageRef 参数用于引用 Hugo 的分类。这是配置菜单最简单的方法，你无需引用任何 Hugo 内容项，它会自动构建正确的链接。如果你需要链接到外部 URL，那么可以使用 url 参数。\npre 参数用于设置菜单条目上的图标，这个图标需要是 Blowfish 图标集中的一个。这个参与可以和 name 一起使用，也可以单独使用。如果你指向展示图标，请设置 identifier 参数，否则 Hugo 将默认使用 name 作为 id，可能不会显示所有菜单项。\n菜单中的多个链接将会根据 weight 权重参数进行从低到高排序，如果权重值一样那么会按照 name 字母顺序排序。\n这两个菜单都是完全可选的，如果不需要也可以注释掉。你可以使用文件中提供的模板作为示例。\n嵌套菜单 #\rBlowfish 还支持嵌套菜单。你需要在menu.toml 中定义一个父级菜单项及其子菜单，使用 parent 可以指定子菜单项的父级。在上面菜单部分提到的所有参数一样适用于子菜单项，同样地，pageRef 和 url 也可以在父菜单项中使用。还需要注意一点，嵌套菜单只能在 main 菜单中可用，即网站头部的菜单。\n# config/_default/menus.toml [[main]] name = \u0026#34;Parent\u0026#34; weight = 20 [[main]] name = \u0026#34;sub-menu 1\u0026#34; parent = \u0026#34;Parent\u0026#34; pageRef = \u0026#34;samples\u0026#34; weight = 20 [[main]] name = \u0026#34;sub-menu 2\u0026#34; parent = \u0026#34;Parent\u0026#34; pageRef = \u0026#34;samples\u0026#34; weight = 20 [[main]] name = \u0026#34;sub-menu 3\u0026#34; parent = \u0026#34;Parent\u0026#34; pre = \u0026#34;github\u0026#34; pageRef = \u0026#34;samples\u0026#34; weight = 20 子导航菜单 #\r此外，你可以设置一个子导航菜单。只需要在 menus.toml 中将新的菜单项定义为 subnavigation 即可。 这将在主菜单下面展示第二行，其中包含子类别项。\n# config/_default/menus.toml [[subnavigation]] name = \u0026#34;An interesting topic\u0026#34; pageRef = \u0026#34;tags/interesting-topic\u0026#34; weight = 10 [[subnavigation]] name = \u0026#34;My Awesome Category\u0026#34; pageRef = \u0026#34;categories/awesome\u0026#34; weight = 20 默认的 name 是 pageRef 的首字母大写。\n缩略图 \u0026amp; 背景 #\rBlowfish 的创立开端旨在便于为文章添加视觉效果。如果你熟悉 Hugo 的文章结构，只需要在你文章所在的文件夹中，放置一个以feature*开头的图像文件（Blowfish支持所有格式的文件，但更推荐使用 .png 或 .jpg）。就这样，Blowfish 就能够将图像文件作为文章的缩略图，而且能够在社交平台的 \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;https://oembed.com/\u0026quot;\u0026gt;oEmbed\u0026lt;/a\u0026gt; 卡片中使用。\n这里 有一个指南，提供了个人更多的内容和示例。如果你想看看具体如何操作可以看这里。\nBlowfish 还支持在文章和列表中使用背景图。为了使与缩略图不同，可以添加一个名为 background* 开头的图像文件。当然如果你没有设置背景图片，Blowfish 会默认使用缩略图作为背景图。\n详细配置 #\r上面的步骤介绍了最基本的配置。如果你现在运行 hugo server，你将会看到一个空白的 Blowfish 网站。更加详细的内容在配置中介绍。\n","externalUrl":null,"permalink":"/docs/getting-started/","section":"文档","summary":"","title":"入门指南","type":"docs"},{"content":"","externalUrl":"https://mucahitkurtlar.github.io","permalink":"/users/9d028495840ad385e6cb3ccf051dca22/","section":"用户列表","summary":"","title":"mucahitkurtlar.github.io","type":"users"},{"content":"Blowfish 适宜个高度定制化的主题，使用到了一些 Hugo 中最新的特性来简化配置方式。\n主题附带了默认配置，可以让你快速启动一个基本的博客或静态网站。\n我们刚刚推出了 CLI 工具，来帮助你快速上手 Blowfish。它将帮助你进行安装和配置。使用以下命令可以全局范围安装 CLI 工具：\nnpx blowfish-tools 配置文件是基于 TOML 格式的，这也是 Hugo 默认支持的语法。当然如果你愿意，也可以将配置转换成 YAML 或 JSON 格式。\n默认情况下，在每个文件中都定义了主题中的可用参数，因此你可以自由调整设置来满足你的需求。\n正如安装说明中的内容，如果你想调整主题配置，可以修改 Hugo 项目中 config/_default/ 文件夹下的文件，并删除项目根目录中的 config.toml 文件。\r网站配置 #\rBlowfish 主题支持了 Hugo 框架中定义的所有标准配置变量。但如果希望有更好的体验，需要设置一些特定的配置。\n网站配置是通过 config/_default/config.toml 文件管理的。下面的表格展示了 Blowfish 中的所有设置.\n值得注意的是，表格中提供的变量名可以使用点表示法来简化 TOML 数据结构，例如 outputs.home 指的是 [outputs] home。\n名称 默认值 描述 theme \u0026quot;blowfish\u0026quot; 当你使用 Hugo 模块安装时，应该移除这个配置项。但对 Git 子模块或本地文件复制的安装方式，必须将其设置为 blowfish 才能正常工作。 baseURL 无 网站 URL 根地址。 defaultContentLanguage \u0026quot;en\u0026quot; 这个值决定了主题中组件和内容所使用的默认语言。 参考 语言和 i18n 部分来了解 blowfish 支持的所有语言代码。 enableRobotsTXT true 当开启这个值，robots.txt 文件将会被创建在站点根目录， 这将允许搜索引擎抓取整个网站。如果你想要自己提供 robots.txt，那么设置这个值为 false 并把你的文件放置到 static 目录下。 为了实现完全控制，你可以需要提供一个 自定义布局 来生成此文件。 pagination.pagerSize 10 定义文章列表中，每页展示的文章数量。 summaryLength 0 当扉页参数 中没有提供文章摘要时，此参数定义了自动生成文章摘要的单词数量。如果值为0，则默认使用第一句话作为摘要。当摘要被隐藏，这个值没有任何效果。 outputs.home [\u0026quot;HTML\u0026quot;, \u0026quot;RSS\u0026quot;, \u0026quot;JSON\u0026quot;] 为站点自动生成输出格式。Blowfish 要求 HTML、RSS 和 JSON 都需要有，以保证主题组件可以正常运作。 permalinks 无 参考 Hugo 文档 中的自定义文章的固定链接配置。 taxonomies 无 参考 整理内容 中的分类器配置。 缩略图 #\rBlowfish 的创立开端旨在便于为文章添加视觉效果。如果你熟悉 Hugo 的文章结构，只需要在你文章所在的文件夹中，放置一个以feature*开头的图像文件（Blowfish支持所有格式的文件，但更推荐使用 .png 或 .jpg）。就这样，Blowfish 就能够将图像文件作为文章的缩略图，而且能够在社交平台的 \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;https://oembed.com/\u0026quot;\u0026gt;oEmbed\u0026lt;/a\u0026gt; 卡片中使用。\n这里 可以看到更多内容，同时我们提供了一个示例，以便你具体看看如何操作。\n语言和i18n #\rBlowfish 针对多语言网站进行了优化，主题的资源素材目前已经翻译成了多个语言版本。语言配置允许你生成多个版本的内容介绍，为网站的访问者提供他们母语的定制化体验。\nBlowfish 主题目前默认支持了以下语言：\n语言 代码 Arabic ar Bulgarian bg Bengali bn Catalan ca Czech cs German de English en Esperanto eo Spanish (Spain) es Finnish fi French fr Hebrew he Croatian hr Hungarian hu Indonesian id Italian it Japanese ja Korean ko Dutch nl Polish pl Portuguese (Brazil) pt-br Portuguese (Portugal) pt-pt Romanian ro Russian ru Thai th Turkish tr Vietnamese vi Simplified Chinese (China) zh-cn Traditional Chinese (Taiwan) zh-tw 组件和静态资源的默认翻译在 i18n/[code].yaml 文件中，当然如果你想自定义，覆盖对应的文件即可。你也可以使用这种方法添加新的语言。如果你想与社区分享心得翻译，请提交PR。\n配置 #\r为了让 Blowfish 尽可能的灵活，每个网站都至少语言创建一个语言配置文件。默认情况下，Blowfish 提供了 config/_default/languages.en.toml 文件以默认支持英语。\n默认的文件可以用来作为创建其他语言的一个模板，如果你希望用英语以外的语言撰写网站，也可以对其重命名。只需要格式遵循 languages.[language-code].toml 的命名即可。\n注意： 保证 网站设置 中的 defaultContentLanguage参数和你提供的语言配置文件相匹配。\r全局 #\r名称 默认值 描述 languageCode \u0026quot;en\u0026quot; Hugo 中的默认语言代码。他可以是一个高层级语言（例如 en），也可以是一个变体子语言（例如 en-au），但一定需要和语言配置文件中的语言代码相匹配。为了符合 HTML 的规范并设置设置大小写敏感的 isoCode，Hugo希望这个值最好是小写。 languageName \u0026quot;English\u0026quot; 语言名称。 weight 1 权重决定了在构建多语言时的语言顺序。 title \u0026quot;Blowfish\u0026quot; 网站的标题。它将在网站头部和底部进行展示。 参数 #\r名称 默认值 描述 params.displayName \u0026quot;EN\u0026quot; 语言在网站中的展示名。 params.isoCode \u0026quot;en\u0026quot; 用于 HTML 元数据的 ISO 语言代码。他可以是一个高层级语言（例如 en），也可以是一个变体子语言（例如 en-au）。 params.rtl false 用于指定是否是 RTL 语言。设置为 true 则网站会从右向左重拍内容。Blowfish 完全支持同时使用 RTL 和 LTR 语言，并将动态调整。 params.dateFormat \u0026quot;2 January 2006\u0026quot; 用于指定如何日期格式化。参考 Hugo 文档 了解可以支持的格式。 params.logo 无 assets/ 文件夹中站点 logo 的相对路径。该 logo 文件需要提供 2x 分辨率并支持任何图像尺寸。 params.secondaryLogo 无 assets/ 文件夹中站点次要 logo 的相对路径。该 logo 文件需要提供 2x 分辨率并支持任何图像尺寸。这个 logo 的颜色方案应该是和上面的是相反或对比的。如果设置了这个值，当用户从 defaultAppearance 模式切换时，将会显示这个 logo。 params.description 无 网站表述。此参数将会被用作站点元数据。 params.copyright 无 此参数是一个 Markdown，用于网站页脚的版权声明。此参数可以包含占位符 { year } ，以此动态插入当前年份。 如果没有提供，Blowfish 将会使用网站 title 自动生成版权信息。 作者 #\r名称 默认值 描述 params.author.name 无 作者名。此参数将展示在文章页脚。并且如果主页使用了个人资料布局，也会展示此值。 params.author.email 无 作者邮箱。如果启用了“通过邮件回复”功能，则会启用此值。 params.author.image 无 作者头像的文件路径。图像应该是 1:1 的宽高比。可以放在网站的 assets/ 文件夹中，也可以是外部 URL。 params.author.imageQuality 96 作者的头像将被视为“高质量”图像，以最小化首页上的瑕疵。值的范围是 1-100。 params.author.headline 无 包含作者头衔的 Markdown。它将展示在主页中作者姓名打分下方。 params.author.bio 无 包含作者简介的 Markdown。它将展示在文章页脚。 params.author.links 无 与作者详细信息一起显示的链接。配置文件中包含示例链接，取消注释即可启用。链接展示的顺序由他们在数组中定义的顺序决定。如果你想自定义链接，可以在 assets/icons/ 中提供相应的SVG图片。 菜单 #\rBlowfish 还支持针对特定语言的菜单配置。菜单配置文件的命名规则和语言配置文件的格式类似。只需要在文件名中提供语言代码，Hugo 就可以知道这是针对哪种语言的菜单。\n菜单配置文件的命名格式是 menus.[language-code].toml。请始终确保菜单配置项中使用的语言代码和语言配置相匹配。\n入门指南部分更详细地介绍了这个文件的结构。你还可以参考 Hugo 菜单文档，以获取更多配置示例。\n主题参数 #\rBlowfish 提供了大量控制主题功能的配置参数，下面的表格中列举了 config/_default/params.toml 文件中所有的可用参数。\n下面列举的文章参数是全局默认值，都可以在每个文章中的前置元数据内容中进行覆盖。详细可以参考 扉页参数。\n全局 #\r名称 默认值 描述 colorScheme \u0026quot;blowfish\u0026quot; 主题使用的颜色方案。合法的值有： blowfish （默认）、avocado、fire、ocean、forest、princess、neon、bloody、terminal、marvel、noir、autumn、congo 和 slate。 具体参考颜色方案以获取更多信息。 defaultAppearance \u0026quot;light\u0026quot; 默认的主题外观，可以是 light 或者 dark。 autoSwitchAppearance true 主题外观是否根据访问者操作系统的偏好自动切换。设置为 false 会强制网站始终使用 defaultAppearance。 enableA11y false 是否启用无障碍切换按钮。 enableSearch false 是否开启网站的搜索功能，设为 true 即为启用。注意，搜索功能依赖于站点设置中的 outputs.home 设置，请确保此值配置正确。 enableCodeCopy false 是否可以将\u0026lt;code\u0026gt;代码块复制到剪贴板。想要使用代码复制功能，需要将 highlight.noClasses 参数设置为 false。 阅读 其他配置文件 以获取更多信息。 replyByEmail false 是否在发布后启用“通过邮件回复”的链接。如果使用，则必须设置 config/_default/languages.en.toml 中的 params.author.email 参数。 forgejoDefaultServer Not set 短代码 forgejo 的默认 server 参数。 giteaDefaultServer Not set 短代码 gitea 的默认 server 参数。 mainSections 无 指定最近文章中应该展示的模块。 如果没有指定，则使用文章数量最多的板块。 showViews 无 是否显示文章和列表页面的阅读量。这需要集成 firebase ，具体可以看下面。 showLikes 无 是否显示文章和列表页面的点赞量。这需要集成 firebase ，具体可以看下面。 robots 无 用于支持搜索引擎爬虫如何处理你的网站。如果设置了该值，它将被输出在页面头部。具体的参数值请参考 Google 文档。 disableImageZoom false 禁用网站上所有图片缩放功能。 disableImageOptimization false 禁用图片上所有图片的调整大小和优化功能，使用 Markdown 语法插入的图片（![](image.jpg)）除外。 disableImageOptimizationMD false 所有以 Markdown 语法（![](image.jpg)）插入的图片，禁用其调整大小和优化功能。 backgroundImageWidth 1200 宽度（以像素为单位）用于缩放背景图像。 disableTextInHeader false 禁用文本类型的标题，对基于 logo 的标题很有用。 defaultBackgroundImage 无 设置默认背景图，用于 background 和 hero 布局下的主页。 defaultFeaturedImage 无 设置默认背景图片，用于所有文章的featured图片，可以通过文章目录中的 featured 图片替换。 defaultSocialImage 无 社交媒体分享（Open Graph 和 Twitter）使用的默认图片，可以通过文章目录中的 featured 图片替换。 highlightCurrentMenuArea 无 当菜单被选择时，标记主菜单中的菜单项。 smartTOC 无 开启智能目录，视图中的项目将会被高亮显示。 smartTOCHideUnfocusedChildren 无 当开启智能目录，如果目录级别不再被聚焦时，将会隐藏更深层次的目录。 fingerprintAlgorithm \u0026quot;sha512\u0026quot; This configures the fingerprint or resources.Fingerprint used in .Data.Integrity for files provided by the theme. Valid values are sha512 (default), sha384, sha256 页头 #\r名称 默认值 描述 header.layout \u0026quot;basic\u0026quot; 定义整个站点的页头的布局，支持的参数有 basic、fixed、fixed-fill、and fixed-fill-blur. 页脚 #\r名称 默认值 描述 footer.showMenu true 显示/隐藏页面底部菜单，该菜单可以在 config/_default/menus.en.toml 文件中的 [[footer]] 部分进行配置。 footer.showCopyright true 是否在底部显示 copyright 版权信息。请注意，如果你想定制，可以在语言配置中使用 copyright 参数。 footer.showThemeAttribution true 是否在网站底部中显示\u0026quot;powered by\u0026quot; 的主题归属信息。如果禁用此参数，请考虑在你网站的其他位置设置主题归属信息，例如在关于页面。 footer.showAppearanceSwitcher false 是否在也页面底部显示外观切换器。浏览器的本地存储会缓存访问者的偏好设置。 footer.showScrollToTop true 当设置为 true 时，显示返回顶部的箭头按钮。 主页 #\r名称 默认值 描述 homepage.layout \u0026quot;profile\u0026quot; 首页布局参数。合法的参数值有： page、profile、hero、card、background 或 custom。当你设置为 custom 时，你必须创建 /layouts/partials/home/custom.html 文件以定制自己的布局。参考主页布局来获取更多信息。 homepage.homepageImage 无 在 hero 和 card 布局中使用的图像。图片可以来自于本地的资源目录，也可以是外部图像 URL。参考 主页布局 来获取更多信息。 homepage.showRecent false 是否在主页展示最新文章列表。 homepage.showRecentItems 5 如果将 showRecent 设置为 true，此参数用于显示多少篇文章。如果没有设置或者为0，则默认显示5篇文章。 homepage.showMoreLink false 是否在主页底部添加“显示更多”，该链接会降会用带到一个预定义位置。 homepage.showMoreLinkDest /posts 更多按钮所指向的位置。 homepage.cardView false 将列表展示为卡片容器。 homepage.cardViewScreenWidth false 增强列表中卡片的宽度，使其可以占据可用的全部宽度。 homepage.layoutBackgroundBlur false 向下滚动主页时，是否模糊背景图。 homepage.disableHeroImageFilter false 主页背景是否套用图片滤镜。 文章页 #\r名称 默认值 描述 article.showDate true 是否显示日期。 article.showViews false 是否显示文章阅读量。这需要集成 firebase ，具体可以看下面。 article.showLikes false 是否显示文章点赞量。这需要集成 firebase ，具体可以看下面。 article.showDateOnlyInArticle false 是否在文章内显示日期，不影响文章列表或卡片页面的日期显示。 article.showDateUpdated false 是否展示文章的更新日期。 article.showAuthor true 是否在文章底部显示作者框。 article.showAuthorBottom false 作者框显示在每页的底部而不是顶部。 article.showHero false 缩略图是否会在每个页面中作为 hero 图像显示。 article.heroStyle 无 hero 图像的展示样式，可选的参数值有：basic、big、background、thumbAndBackground。 article.layoutBackgroundBlur true 向下滚动文章页时，是否模糊背景图。 article.layoutBackgroundHeaderSpace true 在标题和正文之间添加空白区域间隔。 article.showBreadcrumbs false 是否在标题栏显示面包屑导航。 article.showDraftLabel true 当使用 --buildDrafts 构建网站时，是否在文章旁边显示草稿。 article.showEdit false 是否展示编辑文章的链接。 article.editURL 无 当激活 article.showEdit 参数，此参数用于设置文章的编辑链接。 article.editAppendPath true 当激活 article.showEdit 参数，是否将文章的路径附加到 article.editURL 参数所设置的 URL 后面。 article.seriesOpened false 是否默认显示打开系列模块、 article.showHeadingAnchors true 是否在文章标题旁添加锚点。 article.showPagination true 是否在文章末尾展示上一篇/下一篇的文章链接。 article.invertPagination false 是否翻转下一篇/上一篇文章链接的方向。 article.showReadingTime true 是否展示文章的阅读时间。如果你的语言包含 CJK 语言，需要在 config.toml 中开启 hasCJKLanguage 参数。 article.showTableOfContents false 是否展示文章的目录。 article.showRelatedContent false 为文章显示相关内容。如果你想要启用此功能，请检查 config.toml 文件并复制所有 related 相关的参数，如果你想自定义，也可以对 config.toml 添加额外配置。更多内容请参考 Hugo 文档 中关于 related 的内容。 article.relatedContentLimit 3 如果启用showRelatedContent，则限制显示相关文章的数量。 article.showTaxonomies false 是否显示文章的分类或标签信息。 article.showAuthorsBadges false 是否在文章或列表中显示 authors 分类。这需要开启多个作者 multiple authors 和 authors 分类法。 请阅读 这个网页 来获取更多内容。 article.showWordCount false 是否显示文章的字数。 如果你的语言属于 CJK 语言，需要在 config.toml 中开启 hasCJKLanguage 参数。 article.showComments false 是否在文章末尾添加 评论部分。 article.sharingLinks 无 在文章末尾显示的分享链接。如果没有提供或设置为 false，则不会显示任何分享链接。可用的值包括：\u0026ldquo;bluesky\u0026rdquo;、\u0026ldquo;email\u0026rdquo;、\u0026ldquo;facebook\u0026rdquo;、\u0026ldquo;line\u0026rdquo;、\u0026ldquo;linkedin\u0026rdquo;、\u0026ldquo;mastodon\u0026rdquo;、\u0026ldquo;pinterest\u0026rdquo;、\u0026ldquo;reddit\u0026rdquo;、\u0026ldquo;telegram\u0026rdquo;、\u0026ldquo;twitter\u0026quot;和\u0026quot;whatsapp\u0026rdquo; article.showZenMode false 指定是否激活文章阅读的禅模式，即隐藏常规的界面元素。 列表页 #\r名称 默认值 描述 list.showHero false 缩略图是否会在每个页面中作为 hero 图像显示。 list.heroStyle 无 hero 图像的展示样式，可选的参数值有：basic、big、background、thumbAndBackground。 list.showBreadcrumbs false 是否在标题栏显示面包屑导航。 list.layoutBackgroundBlur true 向下滚动列表页时，是否模糊背景图。 list.layoutBackgroundHeaderSpace true 在标题和正文之间添加空白区域间隔。 list.showTableOfContents false 是否展示目录。 list.showSummary false 是否在列表页显示文章摘要。如果在扉页参数中没有提供摘要，那么将会使用站点配置 中的 summaryLength 参数自动生成一个。 list.showViews false 是否显示文章阅读量。这需要集成 firebase ，具体可以看下面。 list.showLikes false 是否显示文章点赞量。这需要集成 firebase ，具体可以看下面。 list.showCards false 是否将每个文章显示为卡片或简单的内联文本。 list.orderByWeight false 是否按照权重（weights）排序文章。 list.groupByYear true 是否根据年做聚合。 list.cardView false 将列表展示为卡片容器。 list.cardViewScreenWidth false 增强列表中卡片的宽度，使其可以占据可用的全部宽度。 list.constrainItemsWidth false 将项目宽度限制为 prose 以提高可读性。在没有 feature 图片的时候非常有用。 list.showTableOfContents false 是否在文章中显示目录表。 网站地图 #\r名称 默认值 描述 sitemap.excludedKinds [\u0026quot;taxonomy\u0026quot;, \u0026quot;term\u0026quot;] 从生成的 /sitemap.xml 文件中排除的内容。 具体的配置请参考Hugo 文档。 分类法 #\r名称 默认值 描述 taxonomy.showTermCount true 是否在分类列表总显示对应的数量。 taxonomy.showHero false 缩略图是否会在每个页面中作为 hero 图像显示。 taxonomy.heroStyle 无 hero 图像的展示样式，可选的参数值有：basic、big、background、thumbAndBackground。 taxonomy.showBreadcrumbs false 是否在标题栏显示面包屑导航。 taxonomy.showViews false 是否显示文章阅读量。这需要集成 firebase ，具体可以看下面。 taxonomy.showLikes false 是否显示文章点赞量。这需要集成 firebase ，具体可以看下面。 taxonomy.showTableOfContents false 是否显示目录。 taxonomy.cardView false 将列表展示为卡片容器。 术语 #\r名称 默认值 描述 term.showHero false 缩略图是否会在每个页面中作为 hero 图像显示。 term.heroStyle 无 hero 图像的展示样式，可选的参数值有： basic、big、background、thumbAndBackground。 term.showBreadcrumbs false 是否在标题栏显示面包屑导航。 term.showViews false 是否显示文章阅读量。这需要集成 firebase ，具体可以看下面。 term.showLikes false 是否显示文章点赞量。这需要集成 firebase ，具体可以看下面。 term.showTableOfContents false 是否显示目录。 term.groupByYear false 是否根据年做聚合。 term.cardView false 将列表展示为卡片容器。 term.cardViewScreenWidth false 增强列表中卡片的宽度，使其可以占据可用的全部宽度。 Firebase(Firebase 平台) #\r名称 默认值 描述 firebase.apiKey 无 Firebase apiKey， 与 Firebase 集成的必填参数。了解如何将 Firebase 集成进 Blowfish 请参考 这个页面。 firebase.authDomain 无 Firebase authDomain，与 Firebase 集成的必填参数。了解如何将 Firebase 集成进 Blowfish 请参考 这个页面。 firebase.projectId 无 Firebase projectId，与 Firebase 集成的必填参数。了解如何将 Firebase 集成进 Blowfish 请参考 这个页面。 firebase.storageBucket 无 Firebase storageBucket，与 Firebase 集成的必填参数。了解如何将 Firebase 集成进 Blowfish 请参考 这个页面。 firebase.messagingSenderId 无 Firebase messagingSenderId，与 Firebase 集成的必填参数。了解如何将 Firebase 集成进 Blowfish 请参考 这个页面。 firebase.appId 无 Firebase appId，与 Firebase 集成的必填参数。了解如何将 Firebase 集成进 Blowfish 请参考 这个页面。 firebase.measurementId 无 Firebase measurementId，与 Firebase 集成的必填参数。了解如何将 Firebase 集成进 Blowfish 请参考 这个页面。 Fathom Analytics(一种网站分析工具) #\r名称 默认值 描述 fathomAnalytics.site 无 支持 Fathom 站点分析平台。更多详细内容请参考 分析文档。 fathomAnalytics.domain 无 如果使用自定义域名的 Fathom Analytics，请在此提供，以便从自定义域名获取 script.js。 Umami Analytics(一种网站分析工具) #\rName Default Description umamiAnalytics.websiteid 无 支持 Umami 站点分析平台。更多详细内容请参考 分析文档。 umamiAnalytics.domain 无 如果使用自定义域名的 Umami Analytics，请在此提供，以便从自定义域名获取 script.js。 umamiAnalytics.dataDomains 无 如果你只想在特别的数个域名中使用 tracker 功能，那么你需要设置它。这个参数的值是逗号分隔的域名列表，如：yoursite.com,yoursite2.com。 umamiAnalytics.scriptName script.js 用于反广告屏蔽的 script.js 名称，由环境变量 TRACKER_SCRIPT_NAME 配置。 umamiAnalytics.enableTrackEvent true 默认会自动添加 Umami Track Event。如果你不想添加 Event，那学需要设置为 false。 Seline Analytics #\rName Default Description selineAnalytics.token 无 Seline 站点分析平台的 token。更多详细内容请参考 分析文档。 selineAnalytics.enableTrackEvent true 默认会自动添加 Umami Track Event。如果你不想添加 Event，那学需要设置为 false。 BuyMeACoffee(赞助平台) #\r名称 默认值 描述 buymeacoffee.identifier 无 buymeacoffee 账号的用户名。 buymeacoffee.globalWidget 无 激活位于全局的 buymeacoffee 组件。 buymeacoffee.globalWidgetMessage 无 新用户首次访问网站时显示的消息。 buymeacoffee.globalWidgetColor 无 组件颜色，使用 HEX 格式。 buymeacoffee.globalWidgetPosition 无 组件位置，例如 \u0026ldquo;Left\u0026rdquo; 或 \u0026ldquo;Right\u0026rdquo;。 验证 #\r名称 默认值 描述 verification.google 无 Google 提供的网站验证字符串，用于在网站元数据中包含。 verification.bing 无 Bing 提供的网站验证字符串，用于在网站元数据中包含。 verification.pinterest 无 Pinterest 提供的网站验证字符串，用于在网站元数据中包含。 verification.yandex 无 Yandex 提供的网站验证字符串，用于在网站元数据中包含。 verification.fediverse 无 联邦域用户名，包括在网站元数据中。将服务器域名包含在用户名中，例如 @you@instanceaddress.tld。 RSSNext #\r名称 默认值 描述 rssnext.feedId 无 RSSNext/Follow 提供的 feeId，这将被自动添加在 rss.xml 中以便完成订阅源所有权验证，证明该源属于你自己。 rssnext.userId 无 RSSNext/Follow 提供的 userId，这将被自动添加在 rss.xml 中以便完成订阅源所有权验证，证明该源属于你自己 Advertisement #\r名称 默认值 描述 advertisement.adsense 无 您的 Google AdSense 发布商 ID (例如 ca-pub-1234567890abcdef)。设置此参数可在您的网站上启用 AdSense 广告。 其他配置文件 #\rBlowfish 主题还包括 markup.toml 配置文件。这个文件包含了一些重要参数，来确保 Hugo 正确配置以生成使用 Blowfish 创建的网站。\n需要确保次文件在 config 目录中，并设置所需要的值。否则某些功能可能无法正确启用，并可能导致意外行为。\n","externalUrl":null,"permalink":"/docs/configuration/","section":"文档","summary":"","title":"配置","type":"docs"},{"content":"","externalUrl":"https://brendanwallace.github.io","permalink":"/users/64ef36564d497eed256b9f4c56b1184e/","section":"用户列表","summary":"","title":"brendanwallace.github.io","type":"users"},{"content":"Blowfish 提供了一个完全灵活的主页布局。你可以选择两种主要模板，并提供了额外的参数来帮助调整设计。当然，你也可以提供自己的模板，完全控制主页的内容。\n主页布局由 params.toml 配置文件中的 homepage.layout 参数来控制的。此外所有布局都默认包括 最近文章。\n个人资料布局 (profile) #\r默认的布局是 profile 布局，这非常适合个人网站和博客。它将作者的详细信息置于中心位置，并附带了头像和社交平台的链接。\n作者信息是在语言配置文件中提供的。具体的参数详情，请参考快速入门和语言配置的内容。\n此外，主页内容中提供的任何 Markdown 都会显示在作者资料的下方。这对使用短代码显示简介或其他主页的自定义内容提供了更多的灵活性。\n如果想要启用 profile 布局，请在 params.toml 配置文件中设置 homepage.layout = \u0026quot;profile\u0026quot;。\n页面布局（page） #\r页面布局只会简单的显示你的 Markdown 内容，这种方式非常适合静态网站，并提供了很多灵活性。\n如果想要启用 page 布局，请在 params.toml 配置文件中设置 homepage.layout = \u0026quot;page\u0026quot;。\n英雄布局（hero） #\r英雄布局（hero）组合了个人资料布局（profile）和卡片布局（card）。它不仅显示了网站作者的个人信息，还在个人资料下方加载了你的 markdown 内容。\n如果想要启用 hero 布局，请在 params.toml 配置文件中设置 homepage.layout = \u0026quot;hero\u0026quot;。\n背景布局（background） #\r背景布局（background）相对于英雄布局（hero）更叫平滑。和英雄布局（hero）类似，它也显示了网站作者的信息，并在其下方加载 markdown 内容。\n如果想要启用 background 布局，请在 params.toml 配置文件中设置 homepage.layout = \u0026quot;background\u0026quot; 和 homepage.homepageImage 。\n卡片布局（card） #\r卡片模板（card）是在页面布局上的扩展，它同样提供了灵活性。在显示了你的 markdown 内容的同时，展示了一个卡片组件中的图像。\n如果想要启用 card 布局，请在 params.toml 配置文件中设置 homepage.layout = \u0026quot;card\u0026quot; 和 homepage.homepageImage 。\n自定义布局（custom） #\r如果以上几个布局还没有满足你的需求，你还可以自己创建自定义布局。这样你可以基于一个空白的画布，来完全控制页面上的内容。\n如果想要启用 custom 布局，请在 params.toml 配置文件中设置 homepage.layout = \u0026quot;custom\u0026quot; 。\n配置好参数后，在 layouts/partials/home 目录下创建一个 custom.html 文件。 custom.html 文件中定义的任何内容都会被放置在网站主页的内容区域。你可以使用 HTML、Tailwind 或 Hugo 模板函数来定义你的布局。\n如果你想在自定义布局上添加 最近文章，请使用 recent-articles/main.html 中的内容。\n如果你想在网站主页使用自定义布局来实现在个人资料和页面布局之间的切换。这里的GitHub 仓库有一个例子可以参考。\n最近文章 #\r所有的主页布局都可以在主要内容下方显示最近文章。如果想要启用此功能，只需要在 params.toml 配置文件中将 homepage.showRecent 参数设置为 true 即可。\n这部分会列举出你在 mainSections 参数中设置的文章列表，此参数允许你使用网站上的任何内容类型。例如，如果你想在最新文章中展示 posts 和 projects 内容中的文章，你可以将此值设置为 [\u0026quot;posts\u0026quot;, \u0026quot;projects\u0026quot;]，这两个部分中的所有文章都会填充到最近文章列表中。Blowfish 主题期望这个参数是一个数组，如果你只想设置一个部分的所有文章，你可以设置为 [\u0026quot;blog\u0026quot;] 即可。\n缩略图 #\rBlowfish 为你的文章提供了视觉支持。如果你熟悉 Hugo 的文章结构，只需要在你的文章对应的文件夹中防止一个以feature*开头的图像文件即可，图像类型几乎支持所有格式，更推荐使用.png 或者 .jpg。这样一来，Blowfish 将会在你的网站内使用该图片作为缩略图，并用在社交媒体平台上的 oEmbed 卡片中。\n这是有更多详细内容，并且有一个便于理解的示例。\n卡片画廊 #\rBlowfish 支持将标准的文章列表显示为卡片画廊，你可以在主页的最近文章和网站上的文章列表中配置这个选项。\n对于主页可以使用 homepage.cardView 和 homepage.cardViewScreenWidth 参数 对于列表页可以使用 list.cardView 和 list.cardViewScreenWidth 参数 请查看 配置文件 以获取更多信息。 ","externalUrl":null,"permalink":"/docs/homepage-layout/","section":"文档","summary":"","title":"主页布局","type":"docs"},{"content":"","externalUrl":"https://pmnxis.github.io","permalink":"/users/5bf94b5c1e0c4a40d81816df85e1444f/","section":"用户列表","summary":"","title":"pmnxis.github.io","type":"users"},{"content":"除了所有默认 Hugo 简码 之外，Blowfish 还添加了一些额外的功能。\nAlert #\ralert 可以将其中内容输出为文章中的风格化消息框。它对于吸引读者注意您不想让读者错过的重要信息很有用。\n参数 功能 icon 可选 显示在左侧的图标。\n默认： exclaimation triangle icon (查看图标简码，了解有关使用图标的更多详细信息。) iconColor 可选 基本 CSS 样式中图标的颜色。\n可以是十六进制值 (#FFFFFF) 或颜色名称 (white)\n默认情况下由当前配色方案决定。 cardColor 可选 基本 CSS 样式中卡片背景的颜色。\n可以是十六进制值 (#FFFFFF) 或颜色名称 (white)\n默认情况下由当前配色方案决定。 textColor 可选 基本 CSS 样式中文本的颜色。\n可以是十六进制值 (#FFFFFF) 或颜色名称 (white)\n默认情况下由当前配色方案决定。 输入内容是用 Markdown 语言编写的，因此您可以根据需要设置其格式。\n例1: 无参数\n{{\u0026lt; alert \u0026gt;}} **警告！**此操作具有破坏性！ {{\u0026lt; /alert \u0026gt;}} **警告！**此操作具有破坏性！\r例2: 未命名参数\n{{\u0026lt; alert \u0026#34;twitter\u0026#34; \u0026gt;}} Don\u0026#39;t forget to [follow me](https://twitter.com/nunocoracao) on Twitter. {{\u0026lt; /alert \u0026gt;}} Don\u0026rsquo;t forget to follow me on Twitter.\r例3: 命名参数\n{{\u0026lt; alert icon=\u0026#34;fire\u0026#34; cardColor=\u0026#34;#e63946\u0026#34; iconColor=\u0026#34;#1d3557\u0026#34; textColor=\u0026#34;#f1faee\u0026#34; \u0026gt;}} This is an error! {{\u0026lt; /alert \u0026gt;}} This is an error!\rArticle #\rArticle 将把一篇文章嵌入到一个 markdown 文件中。 参数中的 link应该是要嵌入的文件的 .RelPermalink。请注意，如果简码引用其父级文件，则它不会显示任何内容。 注意：如果您在 Blowfish（即 /blowfish/）等子文件夹中运行网站，请在链接中包含该路径。\n参数 功能 link 必填 要嵌入文章的 .RelPermalink showSummary 可选 布尔值，指示是否显示文章摘要。如果未设置，将使用站点的默认配置。 compactSummary 可选 布尔值，指示是否以紧凑模式显示摘要。默认为 false。 例如：\n{{\u0026lt; article link=\u0026#34;/zh-cn/docs/welcome/\u0026#34; showSummary=true compactSummary=true \u0026gt;}} Badge #\rbadge 输出一个美观的徽章组件，该组件对于显示元数据很有用。\n例如：\n{{\u0026lt; badge \u0026gt;}} New article! {{\u0026lt; /badge \u0026gt;}} New article!\rButton #\rbutton 输出一个样式化的按钮组件，可用于突出显示主要操作。它有三个可选变量 href、target 和 rel，可用于指定链接的 URL、目标和关系。\n例如：\n{{\u0026lt; button href=\u0026#34;#button\u0026#34; target=\u0026#34;_self\u0026#34; \u0026gt;}} Call to action {{\u0026lt; /button \u0026gt;}} Call to action\rCarousel #\rcarousel 用于生成可交互且具有视觉吸引力的方式展示多个图像的画廊。这允许用户滑动浏览多个图像，同时仅占用单个图像的垂直空间。 所有图像均使用父组件的完整宽度并使用预定义的宽高比 16:9 、 21:9 或 32:9 之一显示。\n参数 功能 images 必填 用于匹配图像名称的正则表达式或 URL。 aspectRatio 可选 画廊的纵横比。16-9 、21-9 或32-9 。默认设置为16-9 。 interval 可选 自动滚动的时间间隔，以毫秒为单位指定。默认为2000（2 秒）。 例1: 16:9 宽高比和 URL 图像列表\n{{\u0026lt; carousel images=\u0026#34;{https://cdn.pixabay.com/photo/2016/12/11/12/02/mountains-1899264_960_720.jpg, gallery/03.jpg, gallery/01.jpg, gallery/02.jpg, gallery/04.jpg}\u0026#34; \u0026gt;}} Previous\rNext\r例2: 21:9 宽高比和正则表达式图像列表\n{{\u0026lt; carousel images=\u0026#34;gallery/*\u0026#34; aspectRatio=\u0026#34;21-9\u0026#34; interval=\u0026#34;2500\u0026#34; \u0026gt;}} Previous\rNext\rChart #\rchart 使用 Chart.js 库将图表嵌入到使用简单结构化数据的文章中。它支持多种不同的图表样式，并且所有内容都可以在简码中进行配置。只需在简码中提供图表参数，Chart.js 将完成剩下的工作。\n有关语法和支持的图表类型的详细信息，请参阅 Chart.js 官方文档。\n例如：\n{{\u0026lt; chart \u0026gt;}} type: \u0026#39;bar\u0026#39;, data: { labels: [\u0026#39;Tomato\u0026#39;, \u0026#39;Blueberry\u0026#39;, \u0026#39;Banana\u0026#39;, \u0026#39;Lime\u0026#39;, \u0026#39;Orange\u0026#39;], datasets: [{ label: \u0026#39;# of votes\u0026#39;, data: [12, 19, 3, 5, 3], }] } {{\u0026lt; /chart \u0026gt;}} 您可以在 图表示例 页面上查看一些更多 Chart.js 示例。\nCode Importer #\r此短代码用于轻松从外部源导入代码，无需复制和粘贴\nParameter Description url 必需的 外部托管代码文件的 URL. type 用于语法突出显示的代码类型. startLine 可选 从代码文件中导入的起始行. endLine 可选 从代码文件中导入的结束行. Example:\n{{\u0026lt; codeimporter url=\u0026#34;https://raw.githubusercontent.com/nunocoracao/blowfish/main/layouts/shortcodes/mdimporter.html\u0026#34; type=\u0026#34;go\u0026#34; \u0026gt;}} {{ $url := .Get \u0026#34;url\u0026#34; }} {{ with resources.GetRemote (urls.Parse $url) }} {{ .Content | markdownify }} {{ else }} {{ warnf \u0026#34;mdimporter shortcode: unable to fetch %q: %s\u0026#34; $url .Position }} {{ end }} {{\u0026lt; codeimporter url=\u0026#34;https://raw.githubusercontent.com/nunocoracao/blowfish/main/config/_default/hugo.toml\u0026#34; type=\u0026#34;toml\u0026#34; startLine=\u0026#34;11\u0026#34; endLine=\u0026#34;18\u0026#34; \u0026gt;}} enableRobotsTXT = true summaryLength = 0 buildDrafts = false buildFuture = false enableEmoji = true Codeberg Card #\rcodeberg 允许您通过 Codeberg API 快速链接 Codeberg 存储库，提供星号和分叉等统计信息的实时更新.\nParameter Description repo [String] Codeberg 存储库的格式为 username/repo Example 1:\n{{\u0026lt; codeberg repo=\u0026#34;forgejo/forgejo\u0026#34; \u0026gt;}} \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\rforgejo/forgejo\rBeyond coding. We forge.\rGo\r2516\r442\rFigure #\rBlowfish 包含一个 figure 简码，用于将图像添加到内容中。该简码取代了基本的 Hugo 功能，且性能更好。\n当提供的图像是页面资源时，将使用 Hugo Pipes 对其进行优化并缩放，以提供适合不同设备分辨率的图像。如果提供了静态资产或外部图像的 URL，它将按原样包含在内，而无需 Hugo 进行任何图像处理。\nfigure 简码接受六个参数：\n参数 功能 src 必填 图像的本地路径/文件名或 URL。当提供路径和文件名时，主题将尝试使用以下查找顺序来查找图像：首先，作为与页面绑定的页面资源；然后是 assets/ 目录中的文件；最后是，static/目录中的文件。 alt 图像的替代文本描述。 caption Markdown 格式的图像标题，将显示在图像下方。 class 应用于图像的其他 CSS 类。 href 图像应链接到的 URL。 target href URL 的目标属性。 nozoom nozoom=true 会禁用图像缩放功能。与 href 结合使用十分有用。 default 用于恢复默认 Hugo figure 行为的特殊参数。只需提供default=true，然后使用正常的 Hugo 简码语法。 Blowfish 还支持使用标准 Markdown 语法自动转换图像。只需使用以下格式，主题将自动处理：\n![Alt text](image.jpg \u0026#34;Image caption\u0026#34;) Forgejo Card #\rforgejo allows you to quickly link a Forgejo repository via the forgejo API, providing real-time updates on stats such as stars and forks.\nParameter Description repo [String] forgejo repo in the format of username/repo server [String] server URL like https://v11.next.forgejo.org Example 1:\n{{\u0026lt; forgejo server=\u0026#34;https://v11.next.forgejo.org\u0026#34; repo=\u0026#34;a/mastodon\u0026#34; \u0026gt;}} a/mastodon\rYour self-hosted, globally interconnected microblogging community\rRuby\r0\r0\r例如：\n{{\u0026lt; figure src=\u0026#34;abstract.jpg\u0026#34; alt=\u0026#34;Abstract purple artwork\u0026#34; caption=\u0026#34;Photo by [Jr Korpa](https://unsplash.com/@jrkorpa) on [Unsplash](https://unsplash.com/)\u0026#34; \u0026gt;}} \u0026lt;!-- OR --\u0026gt; ![Abstract purple artwork](abstract.jpg \u0026#34;Photo by [Jr Korpa](https://unsplash.com/@jrkorpa) on [Unsplash](https://unsplash.com/)\u0026#34;) Photo by Jr Korpa on Unsplash\rGallery #\rgallery 允许您以响应式一次展示多个图像，并具有更加多样化和有趣的布局的图库。\n为了将图像添加到图库中，请为每个图像使用img标签并添加class =\u0026quot;grid-wXX\u0026quot;，以便图库能够识别每个图像的列宽。默认情况下可用的宽度从 10% 开始，以 5% 的增量一直达到 100%。例如，要将宽度设置为 65%，请将类设置为grid-w65。此外，还可以使用 33% 和 66% 的宽度来构建 3 列的画廊。您还可以利用 Tailwind 的响应指示器来构建响应网格。\n例1: 普通图库\n{{\u0026lt; gallery \u0026gt;}} \u0026lt;img src=\u0026#34;gallery/01.jpg\u0026#34; class=\u0026#34;grid-w33\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/02.jpg\u0026#34; class=\u0026#34;grid-w33\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/03.jpg\u0026#34; class=\u0026#34;grid-w33\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/04.jpg\u0026#34; class=\u0026#34;grid-w33\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/05.jpg\u0026#34; class=\u0026#34;grid-w33\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/06.jpg\u0026#34; class=\u0026#34;grid-w33\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/07.jpg\u0026#34; class=\u0026#34;grid-w33\u0026#34; /\u0026gt; {{\u0026lt; /gallery \u0026gt;}} 例2: 响应式图库\n{{\u0026lt; gallery \u0026gt;}} \u0026lt;img src=\u0026#34;gallery/01.jpg\u0026#34; class=\u0026#34;grid-w50 md:grid-w33 xl:grid-w25\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/02.jpg\u0026#34; class=\u0026#34;grid-w50 md:grid-w33 xl:grid-w25\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/03.jpg\u0026#34; class=\u0026#34;grid-w50 md:grid-w33 xl:grid-w25\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/04.jpg\u0026#34; class=\u0026#34;grid-w50 md:grid-w33 xl:grid-w25\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/05.jpg\u0026#34; class=\u0026#34;grid-w50 md:grid-w33 xl:grid-w25\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/06.jpg\u0026#34; class=\u0026#34;grid-w50 md:grid-w33 xl:grid-w25\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/07.jpg\u0026#34; class=\u0026#34;grid-w50 md:grid-w33 xl:grid-w25\u0026#34; /\u0026gt; {{\u0026lt; /gallery \u0026gt;}} Gist #\rgist 短代码允许你通过指定 Gist 用户名、ID 以及可选的特定文件，直接将 GitHub Gist 嵌入到内容中。\n参数 描述 [0] [字符串] GitHub 用户名 [1] [字符串] Gist ID [2]（可选） [字符串] Gist 中要嵌入的文件名（可选） 示例 1：嵌入整个 Gist\n{{\u0026lt; gist \u0026#34;octocat\u0026#34; \u0026#34;6cad326836d38bd3a7ae\u0026#34; \u0026gt;}} 示例 2：嵌入 Gist 中的特定文件\n{{\u0026lt; gist \u0026#34;rauchg\u0026#34; \u0026#34;2052694\u0026#34; \u0026#34;README.md\u0026#34; \u0026gt;}} Gitea 卡片 #\rgitea 允许你通过 gitea API 快速链接一个 Gitea 仓库，提供诸如 stars 和 forks 等统计数据的实时更新。\n参数 描述 repo [字符串] 以 用户名/仓库名 格式表示的 gitea 仓库 server [字符串] 服务器 URL，如 https://git.fsfe.org 示例 1：\n{{\u0026lt; gitea server=\u0026#34;https://git.fsfe.org\u0026#34; repo=\u0026#34;FSFE/fsfe-website\u0026#34; \u0026gt;}} FSFE/fsfe-website\rSource files of fsfe.org, pdfreaders.org, freeyourandroid.org, ilovefs.org, drm.info, and test.fsfe.org. Contribute: https://fsfe.org/contribute/web/\rHTML\r32\r91\rGitHub 卡片 #\rgithub 允许您快速链接到 github Repo，同时显示和更新有关它的实时统计信息，例如它的 star 和 fork 数。\n参数 功能 repo [String] 格式为 username/repo 的 github repo 例1:\n{{\u0026lt; github repo=\u0026#34;nunocoracao/blowfish\u0026#34; \u0026gt;}} nunocoracao/blowfish\rPersonal Website \u0026amp; Blog Theme for Hugo\rHTML\r2172\r573\rGitLab 卡片 #\rgitlab 允许您快速链接 GitLab 项目（GitLab 的 Repo）。 显示有关的实时统计数据，例如它拥有的 star 和 fork 的数量。 与 github 不同，它无法显示项目的主要编程语言。 最后，只要 api/v4/projects/ 可用，就可以提供自定义 GitLab 实例 URL，从而使此简码能够显示大多数自托管/企业组织。\n参数 功能 projectID [String] gitlab 数字项目ID baseURL [String] 可选 gitlab 实例 URL，默认为 https://gitlab.com/ 例1:\n{{\u0026lt; gitlab projectID=\u0026#34;278964\u0026#34; \u0026gt;}} GitLab.org / GitLab\rGitLab is an open source end-to-end software development platform with built-in version control, issue tracking, code review, CI/CD, and more. Self-host GitLab on your own servers, in a container, or on a cloud provider.\r5667\r11284\rHugging Face 卡片 #\rhuggingface 让您能够快速链接 Hugging Face 模型或数据集，显示实时信息如点赞数和下载量，以及类型和描述。\n参数 描述 model [字符串] 格式为 用户名/模型名 的 Hugging Face 模型 dataset [字符串] 格式为 用户名/数据集名 的 Hugging Face 数据集 注意： 使用 model 或 dataset 参数中的一个，不要同时使用。\n示例1（模型）：\n{{\u0026lt; huggingface model=\u0026#34;google-bert/bert-base-uncased\u0026#34; \u0026gt;}} google-bert/bert-base-uncased\rfill-mask\r2361\r5.6115326e\u0026#43;07\r示例2（数据集）：\n{{\u0026lt; huggingface dataset=\u0026#34;stanfordnlp/imdb\u0026#34; \u0026gt;}} stanfordnlp/imdb\rLarge Movie Review Dataset. This is a dataset for binary sentiment classification containing substantially more data than previous benchmark datasets. We provide a set of 25,000 highly polar movie reviews for training, and 25,000 for testing. There is additional unlabeled data for use as well. Supported Tasks and Leaderboards More Information Needed Languages More Information Needed Dataset Structure… See the full description on the dataset page: https://huggingface.co/datasets/stanfordnlp/imdb.\rdataset\r331\r87064\r图标 #\ricon 输出一个 SVG 图标并以图标名称作为其唯一参数。图标会自动缩放以匹配当前文本大小。\n例如：\n{{\u0026lt; icon \u0026#34;github\u0026#34; \u0026gt;}} Output: 图标使用 Hugo Pipeline 填充，这使得它们非常灵活。 Blowfish 包含许多用于社交、链接和其他内置图标。参考 图标示例 页面以获取支持的图标的完整列表。\n可以通过在项目的 assets/icons/ 目录中提供您自己的图标来添加自定义图标。然后可以使用不带 .svg 扩展名的 SVG 文件名在简码中引用该图标。\n还可以通过调用 iconpartial 在 partials 中使用图标。\nKaTeX #\rkatex 简码可用于使用 KaTeX 包向文章内容添加数学表达式。有关可用语法，请参阅支持的 TeX 函数 的在线参考。\n要在文章中加入数学表达式，只需将简码放在任意位置即可。每篇文章只需加入一次，KaTeX 将自动呈现该页面上的任何标记。支持内联和块表示法。\n可以通过将表达式包装在 \\( 和 \\) 分隔符中来生成内联表示法。或者，可以使用 $$ 分隔符生成块符号。\n例如：\n{{\u0026lt; katex \u0026gt;}} \\(f(a,b,c) = (a^2+b^2+c^2)^3\\) \\(f(a,b,c) = (a^2+b^2+c^2)^3\\)\n查看 数学符号示例 页面以获取更多示例。\n重点突出 #\rkeyword 组件可用于在视觉上突出显示某些重要的单词或短语，例如专业技能等。 keywordList 简码可用于将多个 keyword 组合在一起。每个组件可以具有以下参数。\n参数 功能 icon 可选 关键字中使用的图标 输入内容是用 Markdown 编写的，因此您可以根据需要设置其格式。\n例1 :\n{{\u0026lt; keyword \u0026gt;}} Super skill {{\u0026lt; /keyword \u0026gt;}} Standalone skill\r例2 :\n{{\u0026lt; keywordList \u0026gt;}} {{\u0026lt; keyword icon=\u0026#34;github\u0026#34; \u0026gt;}} Lorem ipsum dolor. {{\u0026lt; /keyword \u0026gt;}} {{\u0026lt; keyword icon=\u0026#34;code\u0026#34; \u0026gt;}} **Important** skill {{\u0026lt; /keyword \u0026gt;}} {{\u0026lt; /keywordList \u0026gt;}} {{\u0026lt; keyword \u0026gt;}} *Standalone* skill {{\u0026lt; /keyword \u0026gt;}} Lorem ipsum dolor\rImportant skill\rStandalone skill\rLead #\rlead 用于强调文章的开头。它可以用来设计介绍的样式，或者指出一条重要的信息。只需将任何 Markdown 内容包装在 lead 简码中即可。\n例如：\n{{\u0026lt; lead \u0026gt;}} When life gives you lemons, make lemonade. {{\u0026lt; /lead \u0026gt;}} When life gives you lemons, make lemonade.\r列表 #\rList 将显示最近文章的列表。此简码需要一个限制值来约束列表。此外，它还支持输入 where 和 value ，以便按参数过滤文章。请注意，此简码不会显示其父页面，但会计入限制值。\n参数 功能 limit 必填 要显示的最近文章数量。 title 可选 列表标题，默认为 Recent cardView 可选 列表启用卡片视图，默认为 false where 用于筛选文章的变量，例如 Type value 需要与 where 中定义的参数匹配的值，以进行文章查询，例如对于 where == Type，可以找到文章 sample where 和 value 值用于简码中进行以下格式的查询 where .Site.RegularPages $where $value 。检查 Hugo 文档 以了解有关可用参数的更多信息。\r例 1:\n{{\u0026lt; list limit=2 \u0026gt;}} 最近的文章\rn9o.xyz\r\u0026#8599;\r\u0026#8598;\r欢迎来到 Blowfish\r149 字\u0026middot;1 分钟\r例 2:\n{{\u0026lt; list title=\u0026#34;Samples\u0026#34; cardView=true limit=6 where=\u0026#34;Type\u0026#34; value=\u0026#34;sample\u0026#34; \u0026gt;}} Samples\r多作者\rOctober 12, 2022\u0026middot;1 字\u0026middot;1 分钟\r缩略图\rSeptember 26, 2022\u0026middot;49 字\u0026middot;1 分钟\r图标\rAugust 14, 2020\u0026middot;130 字\u0026middot;1 分钟\rMarkdown\rMarch 11, 2019\u0026middot;371 字\u0026middot;2 分钟\r简码示例\rMarch 10, 2019\u0026middot;71 字\u0026middot;1 分钟\r文本占位符\rMarch 9, 2019\u0026middot;更新于: January 24, 2022\u0026middot;271 字\u0026middot;2 分钟\r文字书写方向 #\rltr 和 rtl 允许您混排内容。许多从左往右书写语言的用户希望在文章中包含部分从右往左的书写内容。使用此简码可以让您做到这一点，并利用 % 作为简码中最外层的标识符 Hugo Shortcodes，其中任何 markdown 内容都会正常渲染。\n例如：\n- This is an markdown list. - Its per default a LTR direction {{% rtl %}} - هذه القائمة باللغة العربية - من اليمين الى اليسار {{% /rtl %}} This is an markdown list. Its per default a LTR direction هذه القائمة باللغة العربية من اليمين الى اليسار Markdown 导入 #\r此简码允许您从外部源导入 Markdown 文件。这对于包含来自其他仓库或网站的内容非常有用，而无需复制和粘贴内容。\n参数 功能 url 必填 外部托管 Markdown 文件的 URL。 例如：\n{{\u0026lt; mdimporter url=\u0026#34;https://raw.githubusercontent.com/nunocoracao/nunocoracao/master/README.md\u0026#34; \u0026gt;}} Hi there 👋 #\r🐳 Principal Product Manager @ Docker 🐡 Creator and maintainer of Blowfish @ Blowfish page 🚀 Personal blog - n9o.xyz 📚 mentoring @ mentorcruise Mermaid #\rmermaid 允许您使用文本绘制可视化的图表。底层使用 Mermaid，并支持各种图表、图表和其他输出格式。\n只需在 mermaid 简码中编写您的 Mermaid 语法，然后让插件完成其余的工作。\n有关语法和支持的图表类型的详细信息，请参阅官方 Mermaid 文档。\n例如：\n{{\u0026lt; mermaid \u0026gt;}} graph LR; A[Lemons]--\u0026gt;B[Lemonade]; B--\u0026gt;C[Profit] {{\u0026lt; /mermaid \u0026gt;}} graph LR;\rA[Lemons]--\u003eB[Lemonade];\rB--\u003eC[Profit]\r您可以在图表和流程图示例 页面上看到一些其他 Mermaid 示例。\n色板 #\rswatches 输出一组最多三种不同的颜色来展示颜色元素的调色板。该简码采用每种颜色的 HEX 码并为每种颜色创建预览。\n例\n{{\u0026lt; swatches \u0026#34;#64748b\u0026#34; \u0026#34;#3b82f6\u0026#34; \u0026#34;#06b6d4\u0026#34; \u0026gt;}} 输出 时间线 #\rtimeline 创建了一个可视化时间线，用于展示专业经验、项目成就等。 timeline 简码依赖于 timelineItem 子简码来定义主时间线中的每个项目。每个项目可以具有以下属性。\n参数 功能 icon 要在时间线中使用的图标。 header 每个条目的标题 badge 放置在右上角徽章内的文本 subheader 每个条目的副标题 例如：\n{{\u0026lt; timeline \u0026gt;}} {{\u0026lt; timelineItem icon=\u0026#34;github\u0026#34; header=\u0026#34;header\u0026#34; badge=\u0026#34;badge test\u0026#34; subheader=\u0026#34;subheader\u0026#34; \u0026gt;}} Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus non magna ex. Donec sollicitudin ut lorem quis lobortis. Nam ac ipsum libero. Sed a ex eget ipsum tincidunt venenatis quis sed nisl. Pellentesque sed urna vel odio consequat tincidunt id ut purus. Nam sollicitudin est sed dui interdum rhoncus. {{\u0026lt; /timelineItem \u0026gt;}} {{\u0026lt; timelineItem icon=\u0026#34;code\u0026#34; header=\u0026#34;Another Awesome Header\u0026#34; badge=\u0026#34;date - present\u0026#34; subheader=\u0026#34;Awesome Subheader\u0026#34; \u0026gt;}} With html code \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;Coffee\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Tea\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Milk\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; {{\u0026lt; /timelineItem \u0026gt;}} {{\u0026lt; timelineItem icon=\u0026#34;star\u0026#34; header=\u0026#34;Shortcodes\u0026#34; badge=\u0026#34;AWESOME\u0026#34; \u0026gt;}} With other shortcodes {{\u0026lt; gallery \u0026gt;}} \u0026lt;img src=\u0026#34;gallery/01.jpg\u0026#34; class=\u0026#34;grid-w33\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/02.jpg\u0026#34; class=\u0026#34;grid-w33\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/03.jpg\u0026#34; class=\u0026#34;grid-w33\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/04.jpg\u0026#34; class=\u0026#34;grid-w33\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/05.jpg\u0026#34; class=\u0026#34;grid-w33\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/06.jpg\u0026#34; class=\u0026#34;grid-w33\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/07.jpg\u0026#34; class=\u0026#34;grid-w33\u0026#34; /\u0026gt; {{\u0026lt; /gallery \u0026gt;}} {{\u0026lt; /timelineItem \u0026gt;}} {{\u0026lt; timelineItem icon=\u0026#34;code\u0026#34; header=\u0026#34;Another Awesome Header\u0026#34;\u0026gt;}} {{\u0026lt; github repo=\u0026#34;nunocoracao/blowfish\u0026#34; \u0026gt;}} {{\u0026lt; /timelineItem \u0026gt;}} {{\u0026lt; /timeline \u0026gt;}} header\rbadge test\rsubheader\rLorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus non magna ex. Donec sollicitudin ut lorem quis lobortis. Nam ac ipsum libero. Sed a ex eget ipsum tincidunt venenatis quis sed nisl. Pellentesque sed urna vel odio consequat tincidunt id ut purus. Nam sollicitudin est sed dui interdum rhoncus. Another Awesome Header\rdate - present\rAwesome Subheader\rWith html code\rCoffee\rTea\rMilk\rShortcodes\rAWESOME\rWith other shortcodes\rAnother Awesome Header\rnunocoracao/blowfish\rPersonal Website \u0026amp; Blog Theme for Hugo\rHTML\r2172\r573\rTypeIt #\rTypeIt 是用于创建打字机效果的最通用的 JavaScript 工具。通过简单的配置，它允许您键入单个或多个断行、删除和相互替换的字符串，甚至可以处理包含复杂 HTML 的字符串。\nBlowfish 使用简码实现 TypeIt 功能的子集。在 typeit 简码中编写文本，并使用以下参数来配置您想要的行为。\n参数 功能 tag [String] 将用于呈现字符串的 html 标签。 classList [String] 应用于 html 元素的 css 类列表。 initialString [String] 将显示为先写入并将被替换的初始字符串。 speed [number] 每步之间的打字速度，以毫秒为单位。 lifeLike [boolean] 使打字速度不规律，就像真人在打字一样。 startDelay [number] 插件在初始化后到开始输入的延迟时间。 breakLines [boolean] 将多个字符串换行输出 (true)，或者将它们删除并替换 (false)。 waitUntilVisible [boolean] 决定脚本在网站加载时启动还是在目标元素可见时启动。默认为 true loop [boolean] 字符串动画是否会循环 例1:\n{{\u0026lt; typeit \u0026gt;}} Lorem ipsum dolor sit amet {{\u0026lt; /typeit \u0026gt;}} 例2:\n{{\u0026lt; typeit tag=h1 lifeLike=true \u0026gt;}} Lorem ipsum dolor sit amet, consectetur adipiscing elit. {{\u0026lt; /typeit \u0026gt;}} 例3:\n{{\u0026lt; typeit tag=h3 speed=50 breakLines=false loop=true \u0026gt;}} Lorem ipsum dolor sit amet, consectetur adipiscing elit. {{\u0026lt; /typeit \u0026gt;}} Youtube 嵌入播放器 #\r使用 lite-youtube-embed 库嵌入 YouTube 视频的简码。该库是 YouTube 嵌入播放器的轻量级替代品，其设计速度更快、更高效。\n参数 功能 id [String] 要嵌入的 YouTube 视频 ID。 label [String] 视频的标签 例1:\n{{\u0026lt; youtubeLite id=\u0026#34;SgXhGb-7QbU\u0026#34; label=\u0026#34;Blowfish-tools demo\u0026#34; \u0026gt;}} ","externalUrl":null,"permalink":"/docs/shortcodes/","section":"文档","summary":"","title":"简码","type":"docs"},{"content":"","externalUrl":"https://ciicadalab.github.io","permalink":"/users/ef51c7b9654a4f2d13525eb80ee46cdf/","section":"用户列表","summary":"","title":"ciicadalab.github.io","type":"users"},{"content":"除了 Hugo 中默认的 front matter，Blowfish 主题中还添加了大量的参数选项来自定义单个页面的展示方式。所有可用的扉页参数如下。\nfront matter 参数中的默认值是从基础配置中继承的，所有只有当你想要覆盖默认值时，才需要在当前页面指定这些参数。\n名称 默认值 描述 title 无 文章名称。 description 无 文章的描述信息，它会被添加在 HTML 的 \u0026lt;meta\u0026gt; 元数据中。 externalUrl 无 如果文章发布在第三方网站上，这里提供只想对应文章的 URL 地址。提供 URL 将会组织生成内容页面，对这篇文章的任何引用都会直接跳转到第三方网站的 URL 上面。 editURL article.editURL 当激活 showEdit 参数时，此参数用来设置编辑文章的 URL。 editAppendPath article.editAppendPath 当激活 showEdit 参数时，该参数指定是否将当前文章路径添加到 editURL 设置的 URL 后面。 groupByYear list.groupByYear 是否在列表页面按年份对文章进行分组。 menu 无 当设置此值，这篇内容的链接将会出现在菜单中。有效值是 main 或 footer。 robots 无 支持搜索引擎的爬虫如何处理这篇文章。如果设置了此值，它将在页面头部输出。更多内容请参考 Google 文档。 sharingLinks article.sharingLinks 指定文章结尾显示哪些分享链接。如果没有设置或设置为 false ，则没有分享链接。 showAuthor article.showAuthor 是否在页脚处显示作者框。 showAuthorBottom article.showAuthorBottom 作者框显示在每页的底部而不是顶部。 authors 无 用于展示多创作者的数组，如果设置了将会覆盖 showAuthor 设置。这里使用了多作者的特性，查看这个页面来获取更多信息。 showAuthorsBadges article.showAuthorsBadges 是否在文章和列表页展示authors作者分类。想是它生效需要开启multiple authors多创作者和 authors 作者分类。 查看这个页面来获取更多信息。 featureimage 无 基于外部 URL 的特征图片链接。 featureimagecaption 无 特征图片的说明，仅在 hero 样式的 big 风格下展示。 showHero article.showHero 是否在文章页面将所裸土作为文章页面内的 hero 图片显示。 heroStyle article.heroStyle hero 图片的风格，合法的值有： basic、big、background、thumbAndBackground。 showBreadcrumbs article.showBreadcrumbs or list.showBreadcrumbs 是否在文章或列表页面显示面包屑导航。 showDate article.showDate 是否显示文章的日期。具体日期使用 date 参数设置。 showDateUpdated article.showDateUpdated 是否显示文章的更新日期。具体日期使用 lastmod 参数设置。 showEdit article.showEdit 是否显示编辑文章内容的链接。 showHeadingAnchors article.showHeadingAnchors 是否在文章的标题旁显示锚点链接。 showPagination article.showPagination 是否在文章页脚显示下一篇/上一篇链接。 invertPagination article.invertPagination 是否翻转下一篇/上一篇的链接方向。 showReadingTime article.showReadingTime 是否显示文章的预估阅读时间。 showTaxonomies article.showTaxonomies 是否显示文章关联的分类/标签。 showTableOfContents article.showTableOfContents 是否显示文章目录。 showWordCount article.showWordCount 是否显示文章字数统计。如果你的语言属于 CJK 语言，需要在 config.toml 中开启 hasCJKLanguage 参数。 showComments article.showComments 是否在文章页脚显示 评论部分。 showSummary list.showSummary 是否在文章或列表页显示摘要。 showViews article.showViews 是否显示文章和列表页面的阅读量。这需要集成 firebase ，具体可以看这个页面来了解如何在 Blowfish 中集成firebase。 showLikes article.showLikes 是否显示文章和列表页面的点赞量。这需要集成 firebase ，具体可以看这个页面来了解如何在 Blowfish 中集成firebase。 seriesOpened article.seriesOpened 是否打开系列模块。 series 无 文章所属的系列数组，我们建议每篇文章只属于一个系列。 series_order 无 文章在系列中的编号。 summary Auto generated using summaryLength (see site configuration) 当启用 showSummary 时，这是作为这篇文章摘要的Markdown字符串。 xml true unless excluded by sitemap.excludedKinds 是否将这篇文章包含在生成的 /sitemap.xml 文件中。 layoutBackgroundBlur true 向下滚动主页时，是否模糊背景图。 layoutBackgroundHeaderSpace true 在标题和正文之间添加空白区域间隔。 ","externalUrl":null,"permalink":"/docs/front-matter/","section":"文档","summary":"","title":"Front Matter(文件头信息)","type":"docs"},{"content":"","externalUrl":"https://georgiancodeclub.github.io","permalink":"/users/25036bf87aa99ef82e09089a1ddbb9eb/","section":"用户列表","summary":"","title":"georgiancodeclub.github.io","type":"users"},{"content":"一个网站会有多个创作者共同贡献内容，所以需要再整个网站中默认使用多创作者。对于这种情况，Blowfish 允许用户使用多创作者功能拓展创作者列表。\n为了保持向后兼容，这个功能仅允许定义额外的创作者，并不会以任何方式修改之前通过配置文件添加的创作者。\n新建创作者 #\r新建创作者的第一步是设置一个 ./data/authors 文件夹。然后，你可以在里面简单的添加新创作者的 json 文件。文件的名称是你在文章引用该作者时需要指定的 key。\n例如，在 ./data/authors 文件夹中新建一个 nunocoracao.json 文件。文件的内容示例如下。name、image、bio 和 social 是目前创作者文件支持的4个参数，这与你在 languages.[language-code].toml 配置文件中的默认创作者配置类似。\n注意：社交参数中的 key 将会默认获取主题的图标 icon，当然你也可以在 assests/icons 文件夹中设置任何图标。\n{ \u0026#34;name\u0026#34;: \u0026#34;Nuno Coração\u0026#34;, \u0026#34;image\u0026#34; : \u0026#34;img/nuno_avatar.jpg\u0026#34;, \u0026#34;bio\u0026#34;: \u0026#34;Theme Creator\u0026#34;, \u0026#34;social\u0026#34;: [ { \u0026#34;linkedin\u0026#34;: \u0026#34;https://linkedin.com/in/nunocoracao\u0026#34; }, { \u0026#34;twitter\u0026#34;: \u0026#34;https://twitter.com/nunocoracao\u0026#34; }, { \u0026#34;instagram\u0026#34;: \u0026#34;https://instagram.com/nunocoracao\u0026#34; }, { \u0026#34;medium\u0026#34;: \u0026#34;https://medium.com/@nunocoracao\u0026#34; }, { \u0026#34;github\u0026#34;: \u0026#34;https://github.com/nunocoracao\u0026#34; }, { \u0026#34;goodreads\u0026#34;: \u0026#34;http://goodreads.com/nunocoracao\u0026#34; }, { \u0026#34;keybase\u0026#34;: \u0026#34;https://keybase.io/nunocoracao\u0026#34; }, { \u0026#34;reddit\u0026#34;: \u0026#34;https://reddit.com/user/nunoheart\u0026#34; } ] } 在文章中引用创作者 #\r你已经新建好了创作者，下一步让我们在文章中引用它。在下面的实例中，我们使用前面新建的创作者 key 来引用它。\nBlowfish 将会使用额外创作者对应json文件中的数据，以帮助在文章中渲染此作者。这个功能不会以改变整个站点配置的默认作者，因此你可以分别控制他们。使用 showAuthor 参数，可以配置是否显示默认作者，这适用于单创作者的博客。扉页中的 authors 参数允许你为文章定义额外的创作者，这里的创作者将独立于整个站点中的默认创作者。\n--- title: \u0026#34;多创作者\u0026#34; date: 2020-08-10 draft: false description: \u0026#34;为你的文章设置多个作者。\u0026#34; slug: \u0026#34;multi-author\u0026#34; tags: [\u0026#34;authors\u0026#34;, \u0026#34;config\u0026#34;, \u0026#34;docs\u0026#34;] showAuthor: true authors: - \u0026#34;nunocoracao\u0026#34; showAuthorsBadges : false --- 上面这个示例和当前这个页面一样，将显示默认创作者和新创作者。你可以滚动此页面来查看实际效果。\n新建创作者分类法 #\r如果你想要获取每个作者的文章列表，需要配置 authors 分类，这会让你了解到一些更有趣的配置。这个是多创作者模式中的一个可选步骤。 To get lists of articles for each of your authors you can configure the authors taxonomy, which opens up some more configurations that might be interesting. This is an optional step in the process that is not required to display the authors in your articles.\n第一步是在 config.toml 文件中配置 authors 分类法，如下所示。尽管 tag 和 category 默认是 Hugo 定义的，但只要你添加了一个特定的分类法，就需要显式添加 tag 和 category，否则基于 Hugo 的文件加载顺序，站点将不会处理 tag 和 category。\n[taxonomies] tag = \u0026#34;tags\u0026#34; category = \u0026#34;categories\u0026#34; author = \u0026#34;authors\u0026#34; 这样一来，你将会有一个所有创作者列表的页面，并且每个创作者都会显示他们参与创作的文章列表。如果你想在每个文章中以徽章的形式中展示作者，有两种方式：在全局配置文件添加 article.showAuthorsBadges 参数 或 在每篇文章的扉页参数中配置 showAuthorsBadges参数。\n最后，你可以为每个创作者页面添加更多细节内容，以便显示简介、链接或者适合你需求的任何其他信息。为了实现这一点，需要在 ./content/authors 文件夹中为每个创作者添加一个目录名为 key 的文件夹，并在文件夹中添加 _index.md 文件，对于上面的例子，我们会得到一个 .content/authors/nunocoracao/_index.md 文件。在这个文件中你可以添加创作者的实际姓名和他们自己的个人信息页面。本文档站点中的作者就是这么配置的，你可以在文档站点中查看实际效果。\n--- title: \u0026#34;Nuno Coração\u0026#34; --- Nuno\u0026#39;s awesome dummy bio. 示例 #\r下面这个示例，介绍了演示了如何关闭站点默认创作者，并在文章中添加多创作者。\n多作者\rOctober 12, 2022\u0026middot;1 字\u0026middot;1 分钟\r","externalUrl":null,"permalink":"/docs/multi-author/","section":"文档","summary":"","title":"多创作者模式","type":"docs"},{"content":"","externalUrl":"https://www.fahru.my.id","permalink":"/users/5440c85ea880d93157088032515962d3/","section":"用户列表","summary":"","title":"fahru.my.id","type":"users"},{"content":"\r站点分析 #\rBlowfish 支持了 Fathom、Google 和 Umami。Fathom 和 Umami 都是开源、简单、且注重隐私的站点分析服务，他们可以很好地替代 Google 分析。Fathom 和 Umami 都有公有云的付费版本，当然你也可以自己手动部署开源版。\nFathom #\r要启用 Fathom Analytics 支持，只需在 config/_default/params.toml 文件中提供您的 Fathom 站点代码。如果您还使用 Fathom 的自定义域功能，并希望从您的域中提供脚本，还可以额外提供 domain 配置值。如果不提供 domain 值，脚本将直接从 Fath只需要在 config/_default/params.toml 文件提供你的 Fathom 站点代码，就可以快速支持 Fathom 站点分析。 如果你想使用自定义域名来获取跟踪脚本， 那么需要提供 domain 参数，否则会从 Fathom 云服务版的地址 (＜cdn.usefathom.com＞) 获取脚本。\n# config/_default/params.toml [fathomAnalytics] site = \u0026#34;ABC12345\u0026#34; domain = \u0026#34;llama.yoursite.com\u0026#34; Google #\rHugo partial 本身已经支持了 Google 站点分析。只需要在 config/_default/config.toml 文件添加 googleAnalytics 参数即可，跟踪脚本会自动添加。\n版本3 (analytics.js) 和版本4 (gtag.js) 都是支持的，参考如下示例：\n# config/_default/config.toml # 版本 3 googleAnalytics = \u0026#34;UA-PROPERTY_ID\u0026#34; # 版本 4 googleAnalytics = \u0026#34;G-MEASUREMENT_ID\u0026#34; Umami #\r只需要在 config/_default/params.toml 文件提供你的 Umami 跟踪代码，就可以快速支持 Umami 站点分析。 如果你想使用自定义域名来获取跟踪脚本， 那么需要提供 domain 参数，否则会从 Umami 云服务版的地址 (analytics.umami.is) 获取脚本。 如果你只想在特别的数个域名中使用 tracker 功能，那么需要提供 dataDomains 参数。否则任何一个匹配了 websiteid 和 domain 参数值的网站，Umami 脚本都会执行。如果环境变量配置了 TRACKER_SCRIPT_NAME 可以填写自定义的脚本名称 scriptName，如果没有配置就注释掉或者填写默认的 script.js 。\nNote: 开启 Umami 网站分析后, Blowfish 会自动支持 Umami 事件追踪。如果你不想支持此功能，需要把参数 enableTrackEvent 设置为 false。\r# config/_default/params.toml [umamiAnalytics] websiteid = \u0026#34;ABC12345\u0026#34; domain = \u0026#34;llama.yoursite.com\u0026#34; dataDomains = \u0026#34;yoursite.com,yoursite2.com\u0026#34; scriptName = \u0026#34;TRACKER_SCRIPT_NAME\u0026#34; enableTrackEvent = true Seline #\r只需要在 config/_default/params.toml 文件提供你的 Seline token，就可以快速支持 Seline 站点分析。\nNote: 开启 Seline 网站分析后, Blowfish 会自动支持 Seline 事件追踪。如果你不想支持此功能，需要把参数 enableTrackEvent 设置为 false。\r# config/_default/params.toml [selineAnalytics] token = \u0026#34;XXXXXX\u0026#34; enableTrackEvent = true 提供自定义站点分析 #\r如果你想在你的网站提供其他站点分析，你可以自己提供脚本，并覆盖 Blowfish 主题中内置的 partial。 只需要创建 layouts/partials/extend-head.html 文件并在内容中提供脚本即可，Blowfish 主题会自动将 extend-head.html 中的内容添加到整个站点的 \u0026lt;head\u0026gt; 中。\n评论 #\rBlowfish 支持了在每篇文章底部添加一个评论功能。只需要提供一个 layouts/partials/comments.html 文件，并在其中添加显示评论的代码即可。\n你可以使用 Hugo 中内置的 Disqus 模板，也可以提供自定义代码。更多内容和细节可以参考 Hugo 文档.\n一旦提供了评论的 partial，你就可以使用 showComments 更细致地控制评论的显隐。此参数可以在 params.toml 配置文件 中全局设置，也可以在每篇文章的 扉页参数 中单独针对特定文章设置。该参数默认为 false，因此需要在上面两个位置设置为 true 才能显示评论。\n网站图标（Favicons） #\rBlowfish 提供了一套空白网站图标以便快速上手，但你可以提供自己的资源来覆盖他们。想要获取新的图标资源最简单的方法是使用第三方提供商，如 favicon.io。\n网站图标资源的位置在 static/ 文件夹中，并务必按照如下的名称命名。如果你使用了favicon.io，那么下载下来的文件名和下面的示例完全一致；当然你也可以通过别的方式提供，记得重命名就行。\nstatic/ ├─ android-chrome-192x192.png ├─ android-chrome-512x512.png ├─ apple-touch-icon.png ├─ favicon-16x16.png ├─ favicon-32x32.png ├─ favicon.ico └─ site.webmanifest 或者，您也可以完全覆盖默认的 favicon 行为，提供自己的 favicon HTML 标签和资源。只需在项目中提供一个 layouts/partials/favicons.html 文件，该文件就会被加入网站的 \u0026lt;head\u0026gt; 中，取代默认资源。\nIcon 图标 #\r与 [图标简码]（http://localhost:1313/docs/shortcodes/#icon）类似，您也可以通过使用 Blowfish 的 icon.html partial，在自己的模板和 partial 中加入图标。该部分包含一个参数，即要包含的图标名称。\n示例：\n{{ partial \u0026#34;icon.html\u0026#34; \u0026#34;github\u0026#34; }} 图标使用 Hugo 管道填充，因此非常灵活。Blowfish 内置了大量用于社交、链接和其他用途的图标。请查看[图标示例]（http://localhost:1313/samples/icons/）页面，查看支持图标的完整列表。\n可以通过在项目的 assets/icons/ 目录中提供自己的图标资源来添加自定义图标。然后，可以通过使用 SVG 文件名（不含.svg扩展名）在局部中引用图标。\n图标还可通过调用[图标简码]（http://localhost:1313/docs/shortcodes/#icon）在文章内容中使用。\n扩展 #\rBlowfish 还提供了许多扩展 partial，可以扩展基本功能。\n文章链接 #\r如果您希望在文章链接后插入附加代码，请创建一个 layouts/partials/extend-article-link.html 文件。如果与badge简码结合使用，该功能将尤为强大，可用于突出显示某些文章的元数据。\n头部和尾部 #\r本主题允许在模板的\u0026lt;head\u0026gt;和\u0026lt;footer\u0026gt;部分直接插入附加代码。这些代码可用于提供不属于主题的脚本或其他逻辑。\n只需创建layouts/partials/extend-head.html或layouts/partials/extend-footer.html，这些部分就会自动包含在网站构建中。这两个 partial 将作为最后一项注入到 \u0026lt;head\u0026gt; 和 \u0026lt;footer\u0026gt; 中，因此它们可用于覆盖主题默认值。\n非缓存的 Head 扩展 #\rextend-head.html 是被缓存的，Blowfish 同时支持一种非缓存的 head 扩展方式，用于根据页面属性条件性地插入脚本或元数据。要使用此功能，请在项目中创建 layouts/partials/extend-head-uncached.html 文件，该文件会被插入到 \u0026lt;head\u0026gt; 标签中。\n此功能适用于根据 shortcode、front matter 标记或其他页面专属数据，动态添加脚本或元数据，避免内容在构建时被缓存。\n例如，可在 extend-head-uncached.html 中使用 HasShortcode 方法，根据 shortcode 是否存在动态加载 CDN JavaScript 文件。\n","externalUrl":null,"permalink":"/docs/partials/","section":"文档","summary":"","title":"局部模板(Partials)","type":"docs"},{"content":"","externalUrl":"https://loisvelasco.is-a.dev","permalink":"/users/6c20c1af90023ed60919801cfba0f08f/","section":"用户列表","summary":"","title":"loisvelasco.is-a.dev","type":"users"},{"content":"\r缩略图 #\rBlowfish 对视觉支持进行了增强，可以让你轻松地为文章添加缩略图。你只需要将一个以 feature* 开头的图像文件（支持几乎所有格式，但更推荐 .png 或 .jpg）放置在文章所在的目录中，如下面所示：\ncontent └── awesome_article ├── index.md └── featured.png 这将告诉 Blowfish 这篇文章有一个特征图片，这个图片可以在网站作为缩略图使用，也可以用于社交平台上的 oEmbed 卡片。\n文件结构 #\r如果你仅仅使用一个 .md 文件作为文章，文件结构如下所示：\ncontent └── awesome_article.md 如果想添加缩略图，你需要将单个 Markdown 文件放在文件夹中。创建一个与文章同名的目录，在其中创建 index.md 文件。文件结构如下所示：\ncontent └── awesome_article └── index.md 然后你只需要像之前那样添加一个特征图片。如果你想看示例，你可以参 这个示例。\nHero 图片 #\r缩略图将默认用作每篇文章的 hero 图片。开启此功能，可以使用全局的 article.showHero 参数来控制整个站点所有文章，或者扉页参数 showHero 来控制其中一个文章。如果你想覆盖 hero 图片的样式，你可以在 ./layouts/partials/ 文件夹中创建一个名为 hero.html 的文件，它会覆盖主题中的默认部分。\n","externalUrl":null,"permalink":"/docs/thumbnails/","section":"文档","summary":"","title":"缩略图","type":"docs"},{"content":"","externalUrl":"https://insidemordecai.com","permalink":"/users/7ee8520d5e9eadae8557be82f46ff18d/","section":"用户列表","summary":"","title":"insidemordecai.com","type":"users"},{"content":"如果你已经按顺序阅读了文档，那么你现在应该已经了解了 Blowfish 中所有的功能和配置信息。这个页面旨在把所有内容整合在一起，并提供一些你会在 Hugo 项目中使用的示例。\n提示: 如果你是Hugo的新用户，请务必阅读官方文档，了解更多关于页面捆绑和资源的概念。\r这个页面上的示例都可以根据不同的场景进行调整，期待你在做自己项目的同时，提出一些对特定内容格式化的想法。\n分支页面 #\rHugo 中的分支页面包括主页、部分列表页面和分类页面等内容，请记住，这些分支页面的文件名都是 _index.md。\nBlowfish 支持在分支页面中设置扉页参数，在扉页中设置的参数将会覆盖在配置文件中设置的参数默认值。例如，在分支页面中的 title 参数将会覆盖页面标题的默认值。\n主页 #\rLayout: layouts/index.html Content: content/_index.md Blowfish 中的主页比较特殊，它的整体设计是由主页的布局参数控制的。你可以在 主页布局 来获取更多内容。\n如果你想自定义主页的内容，你仅需创建一个 content/_index.md 文件。该文件中的任何内容都会包含在你的主页中。\n示例：\n--- title: \u0026#34;欢迎来到 Blowfish ！\u0026#34; description: \u0026#34;这是往主页中添加内容的例子。\u0026#34; --- 欢迎来到我的网站！我很高兴你的来访。 这个例子设置了一个自定义标题，并在页面正文中添加了一些额外的内容。当然任何的 Markdown 都是可接受的，包括短代码、图片和连接。\n列表页 #\rLayout: layouts/_default/list.html Content: content/../_index.md 列表页将所有页面聚合到一个目录下，并为访问者提供了一种浏览页面的方式。博客或者作品集是一个典型案例，因为这两种类型的网站会将帖子或项目整合到一个列表页中。\n创建一个列表页就如同创建子目录一样简单。例如，要创建一个 \u0026ldquo;Projects\u0026rdquo; 列表页，你可以创建content/projects/。然后为你的项目创建一个 Markdown 文件。 Creating a list page is as simple as making a sub-directory in the content folder. For example, to create a \u0026ldquo;Projects\u0026rdquo; section, you would create content/projects/. Then create a Markdown file for each of your projects.\n列表页面默认会自动生成，如果你想在列表添加一些页自定义内容，还需要在此目录创建一个 _index.md 文件。\n. └── content └── projects ├── _index.md # /projects ├── first-project.md # /projects/first-project └── another-project ├── index.md # /projects/another-project └── project.jpg Hugo 将会自动为目录中对应的项目页面生成 URL。\n类似于主页，列表页面也可以通过 _index.md 文件来添加自定义的内容。Blowfish将会在自定义内容的下方，展示这个列表所包含的所有子页面。\n示例：\n--- title: \u0026#34;项目\u0026#34; description: \u0026#34;了解我的一些项目。\u0026#34; cascade: showReadingTime: false --- 本节包含了我所有的当前项目。 在上面的示例中，这里的 cascade 参数被用来隐藏该列表页下任何子页面的阅读时间。这样做是的任何子页面都不会显示阅读时间，这是一种为整个部分添加默认参数的好方法。\n样本部分提供了列表页面的例子。\n分类页面 #\rList layout: layouts/_default/taxonomy.html Term layout: layouts/_default/term.html Content: content/../_index.md 分类页面有两种形式：分类列表和分类术语。列表页面显示给定分类中每个属于的列表，术语页面显示与给定术语相关的页面列表。\n术语这个词可能会有些令人困惑，所以这里让我们举个例子，假设将 animals 分类。\n首先，想要在 Hugo 中使用分类，需要先进行配置。通过创建 config/_default/taxonomies.toml 文件并定义分类名称来完成创建。\n# config/_default/taxonomies.toml animal = \u0026#34;animals\u0026#34; Hugo 期望分类定义式 单数 = “复数” 的形式，所以这里添加单数 animal 等于复数 animals 来创建我们的分类示例。\n现在 animals 分类就有了，需要在内容中添加它。下面是一个简单的在扉页参数中添加分类的例子：\n--- title: \u0026#34;进入狮子的巢穴\u0026#34; description: \u0026#34;这周我们学习狮子。\u0026#34; animals: [\u0026#34;lion\u0026#34;, \u0026#34;cat\u0026#34;] --- 现在我们已经在 animals 分类中添加了 lion 和 cat 两个术语。\n目前看起来还不太明显，但是 Hugo 将会为这个分类自动生成分类列表页和两个术语页。默认情况下可以在 /animals/ 地址访问列表页，在 /animals/lion/ 和 /animals/cat/ 访问术语页。\n这个列表页会列举出所有包含在这个分类中的术语。在上面的例子中，/animals/ 页面会包含 \u0026ldquo;lion\u0026rdquo; 和 \u0026ldquo;cat\u0026rdquo; 的链接，以此将访问者导向至具体的术语页。\n术语页将会列举出包含这个术语的所有页面。这些术语页面本质上和列表页面相同，并且以类似的方式运作。\n如果你想在分类页面中添加自定义的内容，只需要对应文件夹的目录中创建 _index.md 文件即可。\n. └── content └── animals ├── _index.md # /animals └── lion └── _index.md # /animals/lion 这些 _index.md 中的内容都会放置在生成的分类页面上。与其他页面一样，扉页参数中设置的变量也可以用来覆盖默认值。比如你可以有一个标签名是lion，但是可以将其覆盖成 \u0026ldquo;Lion\u0026rdquo;。\n想要查看实际效果，可以看标签分类列表。\n叶子页面 #\rLayout: layouts/_default/single.html Content (standalone): content/../page-name.md Content (bundled): content/../page-name/index.md Hugo 中的页面叶子页面是一个标准的内容页面，它不包含子页面的页面。可以作为关于页面，或者位于个人博客网站中的文章。\n最重要的是，与分支页面不同，叶子页面应该被命名为 index.md，而不是带下划线的_index.md。叶子页面比较特殊，它可以是一个在列表页面中的一个有唯一名称的文件，也可以是在一个有唯一名称的页面捆绑包。\n. └── content └── blog ├── first-post.md # /blog/first-post ├── second-post.md # /blog/second-post └── third-post ├── index.md # /blog/third-post └── image.jpg 当页面中包含类似图片的资源，应该使用页面捆绑包，即子目录的方式。页面捆绑包时一个包含 index.md 文件的子目录。将资源和页面内容打包在同一个目录中是必要的，因为许多短代码和其他主题逻辑假设资源和页面捆绑在一起，\n示例：\n--- title: \u0026#34;我的第一篇博客文章\u0026#34; date: 2022-01-25 description: \u0026#34;欢迎来到我的博客\u0026#34; summary: \u0026#34;了解更多关于我和我创建博客的初衷。\u0026#34; tags: [\u0026#34;welcome\u0026#34;, \u0026#34;new\u0026#34;, \u0026#34;about\u0026#34;, \u0026#34;first\u0026#34;] --- _这_ 是博客的内容。 叶子页面有很多的扉页参数，来帮你你自定义展示它。\n外部链接 #\rBlowfish 允许外部页面链接和文章列表一起显示在列表页。如果你在第三方网站（如Medium）有文章，或者你想连接到研究论文，而不想在 Hugo 中复制内容，这将非常有用。\n为了创建一个外部链接文章，需要设置一些特殊的扉页参数：\n--- title: \u0026#34;我的 Medium 文章\u0026#34; date: 2022-01-25 externalUrl: \u0026#34;https://medium.com/\u0026#34; summary: \u0026#34;我在Medium上写了一篇文章。\u0026#34; showReadingTime: false build: render: \u0026#34;false\u0026#34; list: \u0026#34;local\u0026#34; --- 除了像 title 和 summary 这种普通的扉页参数外，需要设置 externalUrl 参数来告诉 Blowfish 这不是一篇普通的文章。访问者在访问后，会被重定向到这里提供的 URL。\n此外，我们使用了 build 参数来避免 Hugo 生成一个普通页面。因为我们是一个连接到外部的 URL，生成页面是没有意义的。\nHugo 中可以通过命令来快速生成一个外部链接的文件，在创建新的外部链接是，只需要指定 -k external 即可。这让生成外部链接文章变得更简单。\nhugo new -k external posts/my-post.md 简单页面 #\rLayout: layouts/_default/simple.html Front Matter: layout: \u0026quot;simple\u0026quot; Blowfish 包含了一个用于简单页面的布局。简单布局是一个全宽的模板，并仅仅展示 Markdown 中的内容，不包含任何主题中的特性。\n简单布局中唯一可用的特性是面包屑导航和分享链接。这个行为也是通过 扉页参数 来控制。\n如果想在特定页面上启用简单布局，添加 layout 扉页参数，并设置为 \u0026quot;simple\u0026quot;：\n--- title: \u0026#34;我的着陆页\u0026#34; date: 2022-03-08 layout: \u0026#34;simple\u0026#34; --- 这个页面的内容是全宽的。 自定义布局 #\rHugo 的其中一个好处就是它让整个站点、单独内容或页面创建自定义布局变得容易。\n自定义布局遵循所有 Hugo 的模板规则，更多信息可以在 Hugo 官方文档 中找到。\n覆盖默认布局 #\r上面讨论的每种内容类型都列出了其对应的布局文件。如果你在本地项目中创建了这个文件，它将覆盖主题的默认模板，由此可以来自定义网站的样式布局。\n例如，创建一个 layouts/_default/single.html 文件，此文件将允许用户完全自定义叶子页面的布局。\n自定义部分布局 #\r如果你想为个别内容创建自定义布局也很简单。这在使用特定样式列出某种类型内容时会非常有效。\n让我们简单看一个例子，来了解如何为\u0026quot;Projects\u0026quot;页面创建自定义的特殊布局。\n为了做到这一点，使用常规的Hugo规则来在 content 目录下组织你的内容。此外，在和 layout 目录中创建和内容部分相同的目录结构，并在此目录下添加一个 list.html 文件，此文件是 \u0026ldquo;projects\u0026rdquo; 内容的一个新的列表页布局。\n. └── content │ └── projects │ ├── _index.md │ ├── first-project.md │ └── second-project.md └── layouts └── projects └── list.html list.html 文件将会覆盖默认的模板，但只会作用在 projects 部分。我们先看看 _index.md 文件的内容。\n--- title: \u0026#34;Blowfish\u0026#34; date: 2021-08-11 icon: \u0026#34;github\u0026#34; description: \u0026#34;用Tailwind CSS构建的Hugo主题。\u0026#34; topics: [\u0026#34;Hugo\u0026#34;, \u0026#34;Web\u0026#34;, \u0026#34;Tailwind\u0026#34;] externalUrl: \u0026#34;https://github.com/nunocoracao/blowfish/\u0026#34; --- 在这个例子中，我们为每个项目添加了一些参数，然后我们在列表模板中可以使用他们。虽然这个例子没有页面的内容，但这并不组织你添加内容。这是自己的的自定义模板，完全可以随心所欲！\n定义了项目内容后，现在我们可以创建一个列表模板来输出项目中的信息。\n{{ define \u0026#34;main\u0026#34; }} \u0026lt;section class=\u0026#34;mt-8\u0026#34;\u0026gt; {{ range .Pages }} \u0026lt;article class=\u0026#34;pb-6\u0026#34;\u0026gt; \u0026lt;a class=\u0026#34;flex\u0026#34; href=\u0026#34;{{ .Params.externalUrl }}\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;mr-3 text-3xl text-neutral-300\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;relative inline-block align-text-bottom\u0026#34;\u0026gt; {{ partial \u0026#34;icon.html\u0026#34; .Params.icon }} \u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h3 class=\u0026#34;flex text-xl font-semibold\u0026#34;\u0026gt; {{ .Title }} \u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;text-sm text-neutral-400\u0026#34;\u0026gt; {{ .Description }} \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/article\u0026gt; {{ end }} \u0026lt;/section\u0026gt; {{ end }} 尽管这是一个比较简单的例子，但你可以看到这里的 list.html 文件遍历了本节中的所有子页面，然后输出了每个页面的 HTML 链接 和图标。每个项目的扉页参数被用来确定显示哪些信息。 Although this is quite a straightforward example, you can see that it steps through each of the pages in this section (ie. each project), and then outputs HTML links to each project alongside an icon. The metadata in the front matter for each project is used to determine which information is displayed.\n请记住，构建网站的时候需要重新编译 Tailwind CSS，一定要确保相关的样式和类可用。这在高级定制部分有更详细的说明。\n当尝试使用自定义模板时，请务必先了解默认的 Blowfish 模板是如何工作的，然后将其作为指南或模板。补充一点，Hugo 文档 也是学习创建自定义模板的宝贵资源。\n","externalUrl":null,"permalink":"/docs/content-examples/","section":"文档","summary":"","title":"内容示例","type":"docs"},{"content":"","externalUrl":"https://blastomussa.dev","permalink":"/users/4ea7eb30d575afb5183b02f31a661c42/","section":"用户列表","summary":"","title":"blastomussa.dev","type":"users"},{"content":"Blowfish 提供了将一组文章分组到“系列”下的功能。将文章放在系列下将在每个页面中显示该系列文章的其余部分，并在它们之间提供快速导航。您可以在上面看到一个例子。\n创建分类 #\r启用系列的第一步是创建 series 分类法。为此，只需将 series 分类法添加到 config.toml 中的分类法列表中即可。\n[taxonomies] tag = \u0026#34;tags\u0026#34; category = \u0026#34;categories\u0026#34; author = \u0026#34;authors\u0026#34; series = \u0026#34;series\u0026#34; 标记文章 #\r然后你只需要添加 series 和 series_order 参数。 series 参数将是您要将文章放入的系列名称。 series_order 定义了文章在该系列中的顺序。在下面的示例中，文章是 Documentation 系列中的第 11 篇文章。\nseries: [\u0026#34;Documentation\u0026#34;] series_order: 11 系列的表现形式 #\r将文章标记为系列的一部分将自动显示系列模块，例如您在下方看到的这样。您可以使用 params.toml 中的 article.seriesOpened 全局变量或参数 seriesOpened 来选择该模块是否开始打开，以指定文章级别的覆盖。\n","externalUrl":null,"permalink":"/docs/series/","section":"文档","summary":"","title":"系列","type":"docs"},{"content":"","externalUrl":"https://cdell.io","permalink":"/users/db20512c1ee8daab423ea18268cb5910/","section":"用户列表","summary":"","title":"cdell.io","type":"users"},{"content":"您可以通过多种方式对 Blowfish 进行高级自定义。请阅读下文，了解更多可自定义的内容以及实现想要效果的最佳方法。\n如果您需要更多指导，请在 GitHub Discussions 上提问。\nHugo 项目结构 #\r在开始讨论之前，首先简要介绍一下 Hugo 项目结构 以及管理内容和主题自定义的最佳方式。\n总结： 切勿直接编辑主题文件。一定要仅在 Hugo 项目的子目录中进行自定义，而不是在主题目录中进行自定义。\rBlowfish 旨在利用所有标准的 Hugo 参数操作。它旨在允许在不更改任何核心主题文件的情况下自定义和覆盖主题的所有方面。这也给您提供了一种无缝升级的体验，同时让您完全控制网站的外观和感觉。\n为了实现这一点，您永远不应该直接手动更改任何主题核心文件。无论你是使用 Hugo 模块安装，还是作为 git 子模块安装，还是手动将主题安装在 themes/ 目录中，你都应该始终保持这些主题文件不变。\n调整主题行为的正确方法是通过使用 Hugo 强大的文件查找顺序覆盖文件。总之，查找顺序确保了包含在你的项目目录中的文件都会优先于主题文件。\n例如，如果您想覆盖 Blowfish 中的主要文章模板， 您可以创建自己的 layouts/_default/single.html 文件并将其放在项目的根目录中。然后，此文件将覆盖主题文件中的 single.html 同时也不会对主题文件本身进行更改。 这适用于任何主题文件：HTML 模板、partials、shortcodes、config 文件、data、assets 等等。\n只要您遵循这个方法，您将始终能够无缝更新主题（或测试不同的主题版本），而不必担心会丢失任何自定义更改。\n修改图片优化设置 #\rHugo 有各种内置的方法来调整大小，裁剪和优化图像。\n举个例子，如果在 layouts/partials/article-link/card.html 中，您有以下代码：\n{{ with .Resize \u0026#34;600x\u0026#34; }} \u0026lt;div class=\u0026#34;w-full thumbnail_card nozoom\u0026#34; style=\u0026#34;background-image:url({{ .RelPermalink }});\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; {{ end }} Hugo 将默认把图像大小调整为 600px 同时保持比例不变。\n值得注意的是，默认的图像设置比如锚点 也可以在你的 站点配置 中修改，就和修改模板一样。\n想要了解更多信息，请再参考 有关图像处理的 Hugo 文档。\n配色方案 #\rBlowfish 附带了多种开箱即用的配色方案。想要更改基本配色方案，您可以设置 colorScheme 主题参数。请参阅快速上手#配色方案 以了解更多内置方案。\n除了默认方案之外，您还可以创建自己的方案并根据自己的喜好重新设计整个网站的样式。 通过在 assets/css/schemes/ 中创建 \u0026lt;scheme-name\u0026gt;.css 文件可以创建新的配色方案。创建文件后，只需在主题配置中按名称引用它即可。\n注意： 手动生成这些文件可能会比较困难，我编写了一个 nodejs 工具 Fugu 来帮助解决这个问题。简而言之，您只需要提供调色板的三个主要 hex 值，程序将生成一个可以直接导入到 Blowfish 中的 css 文件。\rBlowfish 使用一种定义了整个主题中使用的三色调色板。这三种颜色被定义为 neutral 、 primary 和 secondary 颜色，每种颜色包含十种色调。\n由于 Tailwind CSS 3.0 计算不透明度颜色值的方式，方案中指定的颜色需要通过提供红色、绿色和蓝色值来符合特定格式 。\n:root { --color-primary-500: 139, 92, 246; } 此示例为一个 primary-500 的 CSS 颜色变量，红色值为 139，绿色值为 92，蓝色值为 246。\n您可以使用现有主题样式表之一作为模板并自由配置自己的颜色。如果想要寻求一些灵感，请查看官方 Tailwind 调色板参考 。\n覆盖样式 #\r有时您需要添加自定义样式来设置您自己的 HTML 元素的样式。 Blowfish 允许您覆盖自己的 CSS 样式表中的默认样式来进行自定义。只需在项目的 assets/css/ 文件夹中创建一个 custom.css 文件即可。\ncustom.css 文件将被 Hugo 优化并在所有其他主题样式之后自动加载，这意味着自定义文件中的任何内容都将优先于默认值。\n使用附加字体 #\rBlowfish 可以让您轻松更改网站的字体。在项目的 assets/css/ 文件夹中创建 custom.css 文件后，将字体文件放入 static/fonts 文件夹中。\n. ├── assets │ └── css │ └── custom.css ... └─── static └── fonts └─── font.ttf 这样，该字体便可供网站使用。现在，可以将字体导入到您的 custom.css 中，并在您认为合适的地方进行替换。下面的示例展示了替换整个 html 字体的方法。\n@font-face { font-family: font; src: url(\u0026#39;/fonts/font.ttf\u0026#39;); } html { font-family: font; } 调整字体大小 #\r我们也提供更改网站的字体大小的示例。 Blowfish 使这一切变得简单，因为它在整个主题中使用源自基本 HTML 语言的缩放字体大小方法。默认情况下，Tailwind 将默认大小设置为 12pt ，但您可以将其更改为喜欢的大小。\n参考上面的说明 创建一个 custom.css 文件并添加以下 CSS 声明：\n/* Increase the default font size */ html { font-size: 13pt; } 只需更改此值，您网站上的所有字体大小都将调整为此新大小。因此，要增加使用的整体字体大小，请将该值设置为大于 12pt 。同样，要减小字体大小，请将值设置为小于 12pt 。\n从源代码构建主题 CSS #\r如果您想进行大量更改，您可以利用 Tailwind CSS 的 JIT 编译器并从头开始重建整个主题 CSS。尤其是您想要调整 Tailwind 配置或向主样式表添加额外的 Tailwind 类的时候，这种方法将非常有用。\n注意： 手动构建主题仅适用于高级用户。\r让我们逐步了解构建 Tailwind CSS 的工作原理。\nTailwind 配置 #\r为了生成仅包含用于实际使用的 Tailwind 类的 CSS 文件，JIT 编译器需要扫描所有 HTML 模板和 Markdown 文档，以检查 markup 中存在哪些样式。编译器将根据主题目录根目录中的 tailwind.config.js 文件来完成此操作：\n// themes/blowfish/tailwind.config.js module.exports = { content: [ \u0026#34;./layouts/**/*.html\u0026#34;, \u0026#34;./content/**/*.{html,md}\u0026#34;, \u0026#34;./themes/blowfish/layouts/**/*.html\u0026#34;, \u0026#34;./themes/blowfish/content/**/*.{html,md}\u0026#34;, ], // 更多... }; 此默认配置包含了这些路径，以便您可以十分方便地生成自己的 CSS 文件，而无需修改它，前提是您遵循我们的主题项目结构。也就是说，您必须将 Blowfish 主题文件夹 themes/blowfish/ 作为子目录包含在项目中。这意味着您无法使用 Hugo Modules 方式来安装主题，而必须使用 git 子模块（推荐）或手动安装。 安装文档 介绍了如何使用以上方法安装主题。\n项目结构 #\r为了充分利用默认配置，您的项目结构应该如下所示：\n. ├── assets │ └── css │ └── compiled │ └── main.css # 这是我们生成的文件 ├── config # 站点配置 │ └── _default ├── content # site content │ ├── _index.md │ ├── projects │ │ └── _index.md │ └── blog │ └── _index.md ├── layouts # 站点的自定义布局 │ ├── partials │ │ └── extend-article-link/simple.html │ ├── projects │ │ └── list.html │ └── shortcodes │ └── disclaimer.html └── themes └── blowfish # Git 子模块或本地复制安装 此示例结构添加了一个新自定义的 projects 内容类型，具有自定义的 layout 以及自定义的 shortcodes 和扩展的 partials 。如果项目遵循类似结构，所需要做的就是仅仅是重新编译 main.css 文件。\n安装依赖项 #\r为了使 Tailwind 正常工作，您需要更改终端工作目录为 themes/blowfish/ 并安装项目依赖项。您需要安装 npm。\ncd themes/blowfish npm install 运行 Tailwind 编译器 #\r安装依赖项后，接下来可以使用 Tailwind CLI 来调用 JIT 编译器。返回 Hugo 项目的根目录并在终端输入以下命令：\ncd ../.. ./themes/blowfish/node_modules/@tailwindcss/cli/dist/index.mjs -c ./themes/blowfish/tailwind.config.js -i ./themes/blowfish/assets/css/main.css -o ./assets/css/compiled/main.css --jit 这个命令稍微有点复杂，因为涉及到几个路径。但本质上你是在调用 Tailwind CLI 并提供下面三个参数：\nTailwind 配置文件 tailwind.config.js 主题的 main.css 文件 编译产出后的 CSS 文件的位置 assets/css/compiled/ 配置文件将自动检查项目中以及主题中的所有内容和布局，并构建一个新的 CSS 文件，其中包含网站所需的所有 CSS。由于 Hugo 处理文件层次结构的方式，此文件现在将自动覆盖主题附带的文件。\n每次更改布局并需要新的 Tailwind CSS 样式时，您只需重新运行命令并生成新的 CSS 文件即可。您还可以在命令末尾添加 -w 以在监视模式下运行 JIT 编译器。\n制作构建脚本 #\r要完成此解决方案，您可以通过为这些命令添加别名来简化整个过程，或者参照我的操作，将该 package.json 添加到包含必要脚本的项目的根目录：\n// package.json { \u0026#34;name\u0026#34;: \u0026#34;my-website\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;server\u0026#34;: \u0026#34;hugo server -b http://localhost -p 8000\u0026#34;, \u0026#34;dev\u0026#34;: \u0026#34;NODE_ENV=development ./themes/blowfish/node_modules/@tailwindcss/cli/dist/index.mjs -c ./themes/blowfish/tailwind.config.js -i ./themes/blowfish/assets/css/main.css -o ./assets/css/compiled/main.css --jit -w\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;NODE_ENV=production ./themes/blowfish/node_modules/@tailwindcss/cli/dist/index.mjs -c ./themes/blowfish/tailwind.config.js -i ./themes/blowfish/assets/css/main.css -o ./assets/css/compiled/main.css --jit\u0026#34; }, // and more... } 现在，当您想要设计站点时，可以调用 npm run dev ，编译器将以监视模式运行。当您准备好部署时，运行 npm run build ，您将生成一个编译好的 Tailwind CSS。\n🙋‍♀️ 如果您需要帮助，请随时在 GitHub Discusions 上提问。\n","externalUrl":null,"permalink":"/docs/advanced-customisation/","section":"文档","summary":"","title":"进阶自定义","type":"docs"},{"content":"","externalUrl":"https://jam.dsg.li","permalink":"/users/ee5d5eca13c3742f7a454a52424f9d73/","section":"用户列表","summary":"","title":"jam.dsg.li","type":"users"},{"content":"有许多方法可以部署基于 Blowfish 主题的 Hugo 网站。这个主题几乎在任何部署场景中都很灵活。\nBlowfish 主题是通过将目录转换成相对 URL 路径来构建的。这让网站可以轻松地将子文件夹部署到类似 GitHub Pages 的托管服务中。只要在 config.toml 文件中配置了 baseURL 参数即可，通常不需要其他特殊的配置就能正常工作。\nHugo 官方托管与部署文档是了解如何部署网站的最佳方案。下面会介绍详细介绍一些方案，希望能帮助你在以下平台顺利部署。\n选择你喜欢的服务商：\nGitHub Pages Netlify Render Cloudflare Pages 共享主机，VPS 或者 私有服务器 GitHub Pages #\rGitHub 允许你使用 Actions 在 GitHub Pages 上托管静态网站。如果想要启用此功能，需要你在代码库中启用 Pages 并创建一个新的 Actions 工作流，以此来构建和部署你的网站。\n工作流文件需要是 YAML 格式，放置在 GitHub 仓库的 .github/workflows/ 目录下，并以 .yml 后缀命名即可。\n重要： 确保你需要部署的分支 branches 分支下和 YAML 的部署步骤中 if 参数一致，保证部署正确的分支。\r# .github/workflows/gh-pages.yml name: GitHub Pages on: push: branches: - main jobs: build-deploy: runs-on: ubuntu-24.04 concurrency: group: ${{ github.workflow }}-${{ github.ref }} steps: - name: Checkout uses: actions/checkout@v3 with: submodules: true fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#34;latest\u0026#34; - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 if: ${{ github.ref == \u0026#39;refs/heads/main\u0026#39; }} with: github_token: ${{ secrets.GITHUB_TOKEN }} publish_branch: gh-pages publish_dir: ./public 将配置文件推动到 Github，Github 会自动运行工作流。你需要访问 Github 代码库的 Settings \u0026gt; Pages 部分，检查 YAML 配置是否正确。它应该被设置为使用 gh-pages 分支。\n一旦配置完成后，重新运行 Actions 工作流，网站会正确构建和部署，你就可以查看 Actions 的日志来检查是否部署成功。\nNetlify #\r想要部署 Netlify，需要创建一个新的 CI 并关联到你的源码。在 Netlify UI 中，构建的设置可以置空，你只需要配置你要绑定的域名。\n然后在你的代码库根目录下创建一个 netlify.toml 文件，具体内容如下：\n# netlify.toml [build] command = \u0026#34;hugo mod get -u \u0026amp;\u0026amp; hugo --gc --minify -b $URL\u0026#34; publish = \u0026#34;public\u0026#34; [build.environment] NODE_ENV = \u0026#34;production\u0026#34; GO_VERSION = \u0026#34;1.16\u0026#34; TZ = \u0026#34;UTC\u0026#34; # Set to preferred timezone [context.production.environment] HUGO_VERSION = \u0026#34;0.104.1\u0026#34; HUGO_ENV = \u0026#34;production\u0026#34; [context.deploy-preview.environment] HUGO_VERSION = \u0026#34;0.104.1\u0026#34; 这个配置默认使用的是 Hugo module 的安装方式来加载 Blowfish 主题的。如果你是通过别的方式加载 Blowfish，请将构建命令改为 hugo --gc --minify -b $URL。\n当你将配置文件推动到你的代码库时，Netlify 会自动触发并部署你的网站。你可以在 Netlify UI 中查看日志，以检查是否报错。\nRender #\r部署到 Render 非常地简单易懂，所有的配置都可以通过 Render UI 来完成。\n创建一个 静态网站 并关联到你的代码库。然后只需要配置你的构建命令为 hugo --gc --minify 和发布目录为 public 即可。\n当你更新你的代码库时，Render 总会自动构建并重新部署。\nCloudflare Pages #\rCloudflare 提供了 Pages 服务来托管 Hugo 站点。只需要从 Git 仓库构建并托管到 Cloudflare 的 CDN 即可。这部分可以参考 Hugo 部署指南。\nCloudflare 提供的 Rocket Loader™ 可以通过 JavaScript 来加速网页渲染，但是会破坏 Blowfish 主题中的外观切换器，甚至还有可能因为错误的加载顺序导致网站出现或亮或暗的屏幕闪烁。\n可以通过禁用它来解决：\n点击 Cloudflare 控制台 点击你的域名 点击 Speed 中的 Optimization 选项 滚动到 Rocket Loader™ 并禁用它 即使不需要这个功能，基于 Blowfish 主题的 Hugo 站点本身加载就比较快。\n共享主机，VPS 或者 私有服务器 #\r不论你是使用传统的网站托管，或是部署到你自己的服务器中，这和构建 Hugo 网站并传输文件到你的服务一样简单。\n确保 config.toml 文件中的 baseURL 参数是你的网站根目录的完整 URL（包括任何子域名或子文件夹）。\n然后使用 hugo 构建你的网站，并将输出目录复制到你的服务器根目录，至此你已经部署完毕了。需要注意的是，默认情况下构建好的网站目录是 public。\n如果你需要一个托管提供商，你可以尝试 Vultr 或者 DigitalOcean。注册这些产品默认会给你100美元的免费额度，以便你托管服务。\n","externalUrl":null,"permalink":"/docs/hosting-deployment/","section":"文档","summary":"","title":"托管和部署","type":"docs"},{"content":"为了能够在网站中获取动态数据，我们支持了对 Firebase 的集成。这将允许你在列表和文章中使用阅读量功能。\n访问 Firebase 并创建一个账户 创建一个新项目 选择分析位置 Blowfish 是通过 params.toml 配置文件中的 firebase 相关参数，来和 firebase 集成的，更多的细节内容可以参考 这个页面。你可以在下面找到集成 firebase 的文件示例，请注意 FirebaseConfig 对象内的参数。 // 从你需要的 SDK 中导入所需的函数 import { initializeApp } from \u0026#34;firebase/app\u0026#34;; import { getAnalytics } from \u0026#34;firebase/analytics\u0026#34;; // TODO: Add SDKs for Firebase products that you want to use // https://firebase.google.com/docs/web/setup#available-libraries // 你 Web 应用的 Firebase 配置 // 对于 Firebase JS SDK v7.20.0 以及更高版本，measurementId 参数是可选的 const firebaseConfig = { apiKey: \u0026#34;AIzaSyB5tqlqDky77Vb4Tc4apiHV4hRZI18KGiY\u0026#34;, authDomain: \u0026#34;blowfish-21fff.firebaseapp.com\u0026#34;, projectId: \u0026#34;blowfish-21fff\u0026#34;, storageBucket: \u0026#34;blowfish-21fff.appspot.com\u0026#34;, messagingSenderId: \u0026#34;60108104191\u0026#34;, appId: \u0026#34;1:60108104191:web:039842ebe1370698b487ca\u0026#34;, measurementId: \u0026#34;G-PEDMYR1V0K\u0026#34; }; // 初始化 Firebase const app = initializeApp(firebaseConfig); const analytics = getAnalytics(app); 设置 Firestore - 选择 Build 并打开 Firestore. 创建一个数据库，并在生产环境中启动。选择服务器位置然后等待其部署完成。启动之后你需要配置规则。只需要复制并粘贴下面的内容，然后点击发布即可。 rules_version = \u0026#39;2\u0026#39;; service cloud.firestore { match /databases/{database}/documents { match /{document=**} { allow read, write: if request.auth != null; } } } 开启匿名授权 - 选择 Build 并打开 Authentication。选择开始，点击 Anonymous 并开启，保存。 享受 - 现在可以激活 Blowfish 中文章阅读量和点赞量的功能。 ","externalUrl":null,"permalink":"/docs/firebase-views/","section":"文档","summary":"","title":"Firebase: 阅读量 \u0026 点赞量","type":"docs"},{"content":"","externalUrl":"https://priyakdey.com","permalink":"/users/72d71e304faaa40b3d547d5357edc450/","section":"用户列表","summary":"","title":"priyakdey.com","type":"users"},{"content":"","externalUrl":"https://sdehm.dev","permalink":"/users/1a882ded73613252bb07c2c13f40b9e3/","section":"用户列表","summary":"","title":"sdehm.dev","type":"users"},{"content":"","externalUrl":"https://dizzytech.de","permalink":"/users/039ca94b0aeeb9ab4c95226615bfb840/","section":"用户列表","summary":"","title":"dizzytech.de","type":"users"},{"content":"","externalUrl":"https://alejandro-ao.com/","permalink":"/users/620af4c12a7ee8932fadb45ae52bba7e/","section":"用户列表","summary":"","title":"alejandro-ao.com","type":"users"},{"content":"","externalUrl":"https://adir1.com/","permalink":"/users/64faf41f22317a170125dd7b2cd642e2/","section":"用户列表","summary":"","title":"adir1.com","type":"users"},{"content":"","externalUrl":"https://blog.muffn.io/","permalink":"/users/e07582d573aa187c3c15bb042872ca4a/","section":"用户列表","summary":"","title":"blog.muffn.io","type":"users"},{"content":"","externalUrl":"https://nick.bouwhuis.net","permalink":"/users/fd12be5b9c01f6b6089b8b1cbff1350d/","section":"用户列表","summary":"","title":"nick.bouwhuis.net","type":"users"},{"content":"","externalUrl":"https://vividscc.com/","permalink":"/users/3bfa5ccb77cf79199527df4c0259d0dc/","section":"用户列表","summary":"","title":"vividscc.com","type":"users"},{"content":"","externalUrl":"https://mariuskimmina.com/","permalink":"/users/9327a7a2a271822354f23963b0557368/","section":"用户列表","summary":"","title":"mariuskimmina.com","type":"users"},{"content":"","externalUrl":"https://technicat.com/","permalink":"/users/6ed0dcb17b6e24c166f7da0bdfb0c1f5/","section":"用户列表","summary":"","title":"technicat.com","type":"users"},{"content":"","externalUrl":"https://fugugames.com/","permalink":"/users/e2ca3d6494c32151235beabe7567b23d/","section":"用户列表","summary":"","title":"fugugames.com","type":"users"},{"content":"","externalUrl":"https://hyperbowl3d.com/","permalink":"/users/129162dc71b9d40ee7948e51910d415a/","section":"用户列表","summary":"","title":"hyperbowl3d.com","type":"users"},{"content":"","externalUrl":"https://talkdimsum.com/","permalink":"/users/80d4420e686d5a055bab647fa03d281b/","section":"用户列表","summary":"","title":"talkdimsum.com","type":"users"},{"content":"","externalUrl":"https://alanctanner.com/","permalink":"/users/8168c3eeb157c9c9b1ca287393393f9c/","section":"用户列表","summary":"","title":"alanctanner.com","type":"users"},{"content":"","externalUrl":"https://rdgo.dev/","permalink":"/users/98f15180691d43fbfcbaf685e1b9ab06/","section":"用户列表","summary":"","title":"rdgo.dev","type":"users"},{"content":"","externalUrl":"https://clemsau.com/","permalink":"/users/66a61706d45b77b559869cd1247fe8fc/","section":"用户列表","summary":"","title":"clemsau.com","type":"users"},{"content":"","externalUrl":"https://weaxsey.org/","permalink":"/users/5801e67070cd59e592c82693a1bda773/","section":"用户列表","summary":"","title":"weaxsey.org","type":"users"},{"content":"","externalUrl":"https://nikarashihatsu.github.io/","permalink":"/users/c7116358255c4f5ccb306f7012306e22/","section":"用户列表","summary":"","title":"nikarashihatsu.github.io","type":"users"},{"content":"","externalUrl":"https://www.halcyonstraits.com/","permalink":"/users/d8ebb1396d8c7d2233b33a6b3ca0adc4/","section":"用户列表","summary":"","title":"halcyonstraits.com","type":"users"},{"content":"","externalUrl":"https://www.50-nuances-octets.fr/","permalink":"/users/24577d47b9474b6bc72eba9a6009dba4/","section":"用户列表","summary":"","title":"50-nuances-octets.fr","type":"users"},{"content":"","externalUrl":"https://marupanda.art/marucomics/","permalink":"/users/6e0c28f8b70015dd35f332d927960d06/","section":"用户列表","summary":"","title":"marupanda.art/marucomics","type":"users"},{"content":"","externalUrl":"https://m3upt.com","permalink":"/users/4d4fb24dca11a144122fa0bb831d9d03/","section":"用户列表","summary":"","title":"m3upt.com","type":"users"},{"content":"","externalUrl":"https://pacochan.net","permalink":"/users/c8eb3ba4d0e565e041ead9aabe6fc770/","section":"用户列表","summary":"","title":"pacochan.net","type":"users"},{"content":"","externalUrl":"https://vkmki001.github.io/","permalink":"/users/069e8f01e7ef48830ebea5239e2189b4/","section":"用户列表","summary":"","title":"vkmki001.github.io","type":"users"},{"content":"","externalUrl":"https://bbagwang.com","permalink":"/users/43d57d92cc54037519270a0cb07dbb83/","section":"用户列表","summary":"","title":"bbagwang.com","type":"users"},{"content":"","externalUrl":"https://jamiemoxon.tech","permalink":"/users/d9e559aaa0c3488012725cc4699ff9c4/","section":"用户列表","summary":"","title":"jamiemoxon.tech","type":"users"},{"content":"","externalUrl":"https://theindiecoder.cloud","permalink":"/users/9eed597b03512bc7b7b4b3cf81814a37/","section":"用户列表","summary":"","title":"theindiecoder.cloud","type":"users"},{"content":"","externalUrl":"https://gma.name","permalink":"/users/48ff442c7de299911eab10b72b02cc84/","section":"用户列表","summary":"","title":"gma.name","type":"users"},{"content":"","externalUrl":"https://mayer.life","permalink":"/users/1b3c507d9cd618565898e6d099c0427d/","section":"用户列表","summary":"","title":"mayer.life","type":"users"},{"content":"","externalUrl":"https://scottmckendry.tech","permalink":"/users/d6d2aa4cd9e351e749136df67a27c136/","section":"用户列表","summary":"","title":"scottmckendry.tech","type":"users"},{"content":"","externalUrl":"https://adilhyz.github.io","permalink":"/users/9901f5943260b32ac3002c1002408f19/","section":"用户列表","summary":"","title":"adilhyz.github.io","type":"users"},{"content":"","externalUrl":"https://ohdmire.github.io","permalink":"/users/fec44f5dd2be29e37c305696d018f99f/","section":"用户列表","summary":"","title":"ohdmire.github.io","type":"users"},{"content":"","externalUrl":"https://ricklan.photography","permalink":"/users/954584ca9b811d77ac600cf7c426be45/","section":"用户列表","summary":"","title":"ricklan.photography","type":"users"},{"content":"","externalUrl":"https://deepumohan.com/tech/","permalink":"/users/8032d46bf9c96ae4b59c419032c7ad89/","section":"用户列表","summary":"","title":"deepumohan.com/tech","type":"users"},{"content":"","externalUrl":"https://joush007.github.io","permalink":"/users/b66472425d53d4e270e85ba4f160e7a1/","section":"用户列表","summary":"","title":"joush007.github.io","type":"users"},{"content":"","externalUrl":"https://rejowski.xyz/","permalink":"/users/8fc3ba43309eb4210c5da59847dab5ac/","section":"用户列表","summary":"","title":"rejowski.xyz","type":"users"},{"content":"","externalUrl":"https://blog.stonegarden.dev/","permalink":"/users/3ec093539269bc4ce9498fe9c36a2b7d/","section":"用户列表","summary":"","title":"blog.stonegarden.dev","type":"users"},{"content":"","externalUrl":"https://renaud.warnotte.be","permalink":"/users/4f0c88168fb7a348b4393a56ede2e799/","section":"用户列表","summary":"","title":"renaud.warnotte.be","type":"users"},{"content":"","externalUrl":"https://boringtech.net/","permalink":"/users/82b432ad2bfc873ec725001f0b3ac495/","section":"用户列表","summary":"","title":"BoringTech.net","type":"users"},{"content":"","externalUrl":"https://technicaldc.github.io/","permalink":"/users/6a603c5d465ecb2422ed7a96fd55c99c/","section":"用户列表","summary":"","title":"technicaldc.github.io","type":"users"},{"content":"","externalUrl":"https://alxhslm.github.io/","permalink":"/users/427cec3309be77abe6f19b006b2a3dc0/","section":"用户列表","summary":"","title":"alxhslm.github.io","type":"users"},{"content":"","externalUrl":"https://www.the-maze.net/","permalink":"/users/e518dc969af1ea65a3d0b55630705047/","section":"用户列表","summary":"","title":"the-maze.net","type":"users"},{"content":"","externalUrl":"https://www.dxpetti.com/","permalink":"/users/0327ac1993f378aa2fc5bbb8a840c9cb/","section":"用户列表","summary":"","title":"DXPetti.com","type":"users"},{"content":"","externalUrl":"https://asterisk.lol","permalink":"/users/6e57b74d392f64f3698aee7046cc2606/","section":"用户列表","summary":"","title":"asterisk.lol","type":"users"},{"content":"","externalUrl":"https://ekwska.com","permalink":"/users/1314bf3d7ce70ad90f1fc7666032e147/","section":"用户列表","summary":"","title":"ekwska.com","type":"users"},{"content":"","externalUrl":"https://todreamr.github.io/","permalink":"/users/1f88d7c1e8e83b761f84b38daaa8016d/","section":"用户列表","summary":"","title":"todreamr.github.io","type":"users"},{"content":"","externalUrl":"https://aakashnand.com/","permalink":"/users/a322d57671bf49fe0f2539096f9ed57f/","section":"用户列表","summary":"","title":"aakashnand.com","type":"users"},{"content":"","externalUrl":"https://innerknowing.xyz/en/","permalink":"/users/1a328ae325c5da884a5b15a1b4d4a446/","section":"用户列表","summary":"","title":"innerknowing","type":"users"},{"content":"","externalUrl":"https://karlukle.site","permalink":"/users/7d028665dc1cf54485e6e82a7083ce69/","section":"用户列表","summary":"","title":"karlukle.site","type":"users"},{"content":"","externalUrl":"http://www.adammadej.com/","permalink":"/users/15cf92fba36f0319bd4b176da554fdb9/","section":"用户列表","summary":"","title":"Adam Madej - Gameplay Animator","type":"users"},{"content":"","externalUrl":"http://www.eallion.com/","permalink":"/users/1f94add7b0ba58983ff507632b822401/","section":"用户列表","summary":"","title":"eallion.com","type":"users"},{"content":"","externalUrl":"https://synapticsugar.games","permalink":"/users/c0d9928ff3857960ec230178bdec1b8d/","section":"用户列表","summary":"","title":"Synaptic Sugar","type":"users"},{"content":"","externalUrl":"https://www.michaeldorner.de","permalink":"/users/d965f981aa39336ef7be5efac83c96b2/","section":"用户列表","summary":"","title":"michaeldorner.de","type":"users"},{"content":"","externalUrl":"http://www.ignaciomconde.com/","permalink":"/users/4de384e83ae8af3834cad28f6dfc6966/","section":"用户列表","summary":"","title":"Ignacio Conde","type":"users"},{"content":"","externalUrl":"https://memv.ennbee.uk/","permalink":"/users/9f984d61b6086212e76291d2698d0498/","section":"用户列表","summary":"","title":"MEM v ENNBEE","type":"users"},{"content":"","externalUrl":"https://joshblais.com/","permalink":"/users/807a03786a63504a144bb3b947a2969c/","section":"用户列表","summary":"","title":"Joshua Blais","type":"users"},{"content":"","externalUrl":"https://www.beautyformulation.com/","permalink":"/users/04bb53c19a5a817c1a0630b65260909d/","section":"用户列表","summary":"","title":"Beauty Formulation","type":"users"},{"content":"","externalUrl":"https://blog.wtcx.dev/","permalink":"/users/4b8c5f7ee72baf8411dae867f9206b63/","section":"用户列表","summary":"","title":"Middle of Nowhere","type":"users"},{"content":"","externalUrl":"https://blog.ummit.dev/","permalink":"/users/c506ded8078df151fc8ce943e7ac1c8a/","section":"用户列表","summary":"","title":"UmmIt - Blog","type":"users"},{"content":"","externalUrl":"https://nveshaan.github.io/","permalink":"/users/02c452502ee9a03866c720c14bf86f9e/","section":"用户列表","summary":"","title":"nveshaan","type":"users"},{"content":"","externalUrl":"https://micheledinelli.github.io","permalink":"/users/27cc5a091bef86a9b5dcfa2c035308ed/","section":"用户列表","summary":"","title":"micheledinelli.github.io","type":"users"},{"content":"","externalUrl":"https://kumacat.pages.dev","permalink":"/users/d52c3523ad809eb1d9ddbcbe32e92661/","section":"用户列表","summary":"","title":"kumacat.pages.dev","type":"users"},{"content":"","externalUrl":"https://andrealucchini.com","permalink":"/users/bdd6b2db27fb40b3fa79a37659b2f285/","section":"用户列表","summary":"","title":"andrealucchini.com","type":"users"},{"content":"","externalUrl":"https://luizglomyer.github.io/","permalink":"/users/af89464ac25ab9445658a3541e623778/","section":"用户列表","summary":"","title":"glomyer.dev","type":"users"},{"content":"","externalUrl":"https://utrodus.com","permalink":"/users/c562b0e606584dd96159faf763291fe1/","section":"用户列表","summary":"","title":"utrodus.com","type":"users"},{"content":"","externalUrl":"https://lazarusoverlook.com","permalink":"/users/033c87b7e950b82ea500c552c9523367/","section":"用户列表","summary":"","title":"lazarusoverlook.com","type":"users"},{"content":"","externalUrl":"https://p3rception.github.io/","permalink":"/users/7596a225b244e0859da338621e680481/","section":"用户列表","summary":"","title":"p3rception.github.io","type":"users"},{"content":"","externalUrl":"https://www.emse.education","permalink":"/users/54b73306674ec7e6778b54a0a8b18b36/","section":"用户列表","summary":"","title":"Handbook on Teaching Empirical Software Engineering: Online Materials","type":"users"},{"content":"","externalUrl":"https://blog.lofibean.cc","permalink":"/users/ad989702a19d1fd8add147d6771c6c02/","section":"用户列表","summary":"","title":"blog.lofibean.cc","type":"users"},{"content":"","externalUrl":"https://merox.dev","permalink":"/users/080a851b486ff5be4201f6fbe1f9616d/","section":"用户列表","summary":"","title":"merox.dev","type":"users"},{"content":"","externalUrl":"https://acamize.com/","permalink":"/users/e263f9bb6dcec27003a8f5f947ba5abb/","section":"用户列表","summary":"","title":"Academy Customize","type":"users"},{"content":"","externalUrl":"https://mrtruongvu.com","permalink":"/users/837b47128639b5359ade845eae461c3a/","section":"用户列表","summary":"","title":"mrtruongvu.com","type":"users"},{"content":"","externalUrl":"https://stepaniah.me","permalink":"/users/1b3da762734b4fb503e49822ed506dbb/","section":"用户列表","summary":"","title":"StepaniaH","type":"users"},{"content":"","externalUrl":"https://laterre.dev/","permalink":"/users/447e2f0f6f439b915e0b57f93e49b7d6/","section":"用户列表","summary":"","title":"Laterre Dev","type":"users"},{"content":"","externalUrl":"https://willhack.top/","permalink":"/users/8a994f70010fa98dac2838ddd246224e/","section":"用户列表","summary":"","title":"WillHack - service for reality hackers","type":"users"},{"content":"","externalUrl":"https://lazyproductreviews.com/","permalink":"/users/3fa4eb553f5d984050d2ee4954960034/","section":"用户列表","summary":"","title":"Lazy Product Reviews","type":"users"},{"content":"","externalUrl":"https://zzzhome.cc/","permalink":"/users/46ea5d4b3698fa18fc0b79faa3d89bef/","section":"用户列表","summary":"","title":"zzzhome","type":"users"},{"content":"","externalUrl":"https://bootlegcoal.com","permalink":"/users/915a897f2ea3ba018728d7dce3540b1b/","section":"用户列表","summary":"","title":"Bootleg Coal Rebellion","type":"users"},{"content":"","externalUrl":"https://ctry.tech/","permalink":"/users/0805e986c2f7265e3bbbfc7bc647ed92/","section":"用户列表","summary":"","title":"Chill-Try","type":"users"},{"content":"","externalUrl":"https://hudsonmcnamara.com","permalink":"/users/2d29fadfaf8ddfaee0b69b563bae8d2d/","section":"用户列表","summary":"","title":"Hudson McNamara","type":"users"},{"content":"","externalUrl":"https://www.wegumweg.de","permalink":"/users/eb23ebd26738c98db323eff207dc7c0e/","section":"用户列表","summary":"","title":"Weg um Weg","type":"users"},{"content":"","externalUrl":"https://panoskorovesis.github.io/","permalink":"/users/706590b7d6a58b77f0eadb22b1dc6cd5/","section":"用户列表","summary":"","title":"The Space 🌍","type":"users"},{"content":"","externalUrl":"https://adriantunez.cloud","permalink":"/users/6057b72b4986ae88640d46262a4be0a0/","section":"用户列表","summary":"","title":"Adri Antunez's Cloud Site","type":"users"},{"content":"","externalUrl":"https://irusukan.com","permalink":"/users/e3f304eacd2f79e31f294cae0ff8162e/","section":"用户列表","summary":"","title":"irusukan","type":"users"},{"content":"","externalUrl":"https://feec-seminar-comp-eng.github.io/","permalink":"/users/405727a6fae1350173ef8915b4c9eb7d/","section":"用户列表","summary":"","title":"FEEC/UNICAMP IA382 - Seminar in Computer Engineering","type":"users"},{"content":"","externalUrl":"https://blog.francescopapini.com","permalink":"/users/a615163aad4c6bb5746a697a9450d563/","section":"用户列表","summary":"","title":"blog.francescopapini.com","type":"users"},{"content":"","externalUrl":"https://heykyo.com","permalink":"/users/9d162f4046cb83c367d8d8ab57240711/","section":"用户列表","summary":"","title":"Kyo's Garden","type":"users"},{"content":"","externalUrl":"https://abantikabhuti.github.io","permalink":"/users/7c98d8b7ba531e032abcd675d4f49c17/","section":"用户列表","summary":"","title":"abantikabhuti.github.io","type":"users"},{"content":"","externalUrl":"https://yag0x1.github.io","permalink":"/users/e4f1c9a4c352ea63707824576d889c8f/","section":"用户列表","summary":"","title":"yag0x1.github.io","type":"users"},{"content":"","externalUrl":"https://caytejohn.xyz","permalink":"/users/bfe9e12b443e96f40b05b584166636f5/","section":"用户列表","summary":"","title":"caytejohn.xyz","type":"users"},{"content":"","date":"October 4, 2023","externalUrl":null,"permalink":"/categories/blowfish/","section":"Categories","summary":"","title":"Blowfish","type":"categories"},{"content":"","date":"October 4, 2023","externalUrl":null,"permalink":"/tags/blowfish/","section":"标签","summary":"","title":"Blowfish","type":"tags"},{"content":"","date":"October 4, 2023","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"October 4, 2023","externalUrl":null,"permalink":"/tags/hugo/","section":"标签","summary":"","title":"Hugo","type":"tags"},{"content":"假装这里有一份 Nuno 的简介。\n","date":"October 4, 2023","externalUrl":null,"permalink":"/authors/nunocoracao/","section":"作者列表示例","summary":"","title":"Nuno Coração","type":"authors"},{"content":"Blowfish 支持基于 Hugo 的所有分类方法。同时，当前的标签预览页也支持展示自定义内容。\n在这里可以为每个分类添加额外的描述信息。查看下面的高级标签页面，了解更多。\n","date":"October 4, 2023","externalUrl":null,"permalink":"/tags/","section":"标签","summary":"","title":"标签","type":"tags"},{"content":"\r这是 background 的样式示例。\r切换 layout \u0026orarr;\rnpx blowfish-tools ","date":"October 4, 2023","externalUrl":null,"permalink":"/","section":"欢迎来到 Blowfish! 🎉","summary":"","title":"欢迎来到 Blowfish! 🎉","type":"page"},{"content":"","date":"October 4, 2023","externalUrl":null,"permalink":"/categories/%E5%BC%80%E6%BA%90/","section":"Categories","summary":"","title":"开源","type":"categories"},{"content":"一年前我创建了 Blowfish，这是一个为了打造我的个人主页而精心设计的 Hugo 主题。我决定将其作为一个开源项目。直到今天，Blowfish 已经变成了一个蓬勃发展的开源项目，在 GitHub 上拥有超过900个 star 和数百名用户。在本教程中，我将向你展示如何搭建并在几分钟内让你的网站运行起来。\nnunocoracao/blowfish\rPersonal Website \u0026amp; Blog Theme for Hugo\rHTML\r2172\r573\rTL;DR #\r本指南的目标是指导新用户如何使用 Hugo 快速安装、管理和发布自己的网站。最终的版本可以看这个代码库——如果你想直接跳到结尾的话可以直接看这里。\n视觉风格只是 Blowfish 提供的众多特性之一。想要了解更多，我们鼓励你浏览文档，学习如何根据自己的需求自定义主题。另外，已经有许多其他用户使用该主题并提供了十分优秀的示例，来为你提供灵感。Blowfish 还提供了一些额外的基于 短代码 的功能——你可以在这里查看它们以获取更多灵感。\n设置你的环境 #\r让我们从安装工具开始。本指南涵盖了在 Mac 操作系统下的步骤，这些命令可能不适用于你的硬件和操作系统。如果你使用的是 Windows 或 Linux，请参考文档：安装 Hugo 和GitHub CLI。\n无论如何，如果你使用的是 MacOS，那么首先需要安装 brew ——一个专为 MacOS 的包管理器，这将有助于安装和管理其他工具。\n/bin/bash -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\u0026#34; 安装完成 brew 后，让我们安装 Git, Hugo 和 GitHub CLI。\nbrew install git brew install hugo brew install gh 为你的网站代码创建一个文件夹，并在终端中打开（我在下面创建了 blowfish-tutorial 文件夹，当然你可以将其重命名为任何名称）。\nmkdir blowfish-tutorial cd blowfish-tutorial 进入文件夹后的下一步，就是初始化你本地的 git 仓库。\ngit init -b main 现在，让我们创建并同步本地仓库到 GitHub 仓库，这样你的代码就可以在远程存储。\ngh auth login gh repo create git push --set-upstream origin main 查看下面的图片，这是我的远程仓库的地址。同样地，你也可以随意更改以适应你自己的 GitHub 仓库。\n最后，创建一个 .gitignore 文件，它会自动排除某些文件，以防止这些文件传到远程仓库。下面的例子是我在 .gitignore 文件中添加的文件和文件夹。\n#others node_modules .hugo_build.lock # OS generated files .DS_Store .DS_Store? ._* .Spotlight-V100 .Trashes # Hugo public 最后一步是保存所有更改，并推送到你的远程仓库中。 The last step is to save all the changes to the repo.\ngit add . git commit -m “initial commit” git push 创建并配置站点 #\r所有的准备工作就绪后，创建和配置你的站点将会很容易。继续在上一部分你创建的文件夹内，让我们首先创建一个空的 Hugo 网站（不关联任何主题）。\nhugo new site --force . 执行完成后，尝试用下面的命令来运行你的网站。打开浏览器并访问 https://localhost:1313 即可查看你的网站。\nhugo server emmmm… 页面未找到404了，是吧？ 这是预期内的，你创建了一个空白网站，Hugo 不会添加任何默认的页面——换句话说，你的网站还没有任何页面可以显示。\n下一步，让我门使用 git submodules 来安装 Blowfish。通过 git submodules 安装可以让以后管理和升级 Blowfish 主题更加方便。\ngit submodule add -b main https://github.com/nunocoracao/blowfish.git themes/blowfish 接下来，在你的代码根目录下创建 config/_default/ 文件夹。现在你需要下载这些文件，并把它们放在刚刚创建的 _default 文件夹内。最终的文件结构看起来应该是这样的。\nconfig/_default/ ├─ config.toml ├─ languages.en.toml ├─ markup.toml ├─ menus.en.toml └─ params.toml ` 打开 config.toml 并把 theme = \u0026ldquo;blowfish” 这一样的注释取消掉，目前为止你已经准备好了。再次尝试运行网站，并打开浏览器在_https://localhost:1313_查看效果。\nhugo server 你应该能看到下面这样。目前我们还没有添加任何内容，所以还没有页面，但是 Blowfish 主题已经准备就绪，下面只需要配置。\n现在我们来配置主题。\n仅供参考 本指南不会详细介绍 Blowfish 中的所有特性和参数——如果想要了解所有的功能特性和参数，以及如何使用它们，请参考Blowfish 文档。\rmenus.en.toml #\r这个文件定义了你的顶部（banner）和底部（footer）的菜单结构。对于本指南，我们只使用菜单的这两部分：Posts 和 Tags。\nPosts - 用于展示网站中的所有内容条目的完整列表 Tags - 自动生成每篇文章的标签 为了实现这一点，请确保 menus.en.toml 文件中设置了以下参数。完成修改后，重新运行hugo server，你将会看到顶部菜单。\n[[main]] name = \u0026#34;Posts\u0026#34; pageRef = \u0026#34;posts\u0026#34; weight = 10 [[main]] name = \u0026#34;Tags\u0026#34; pageRef = \u0026#34;tags\u0026#34; weight = 30 languages.en.toml #\r这个文件配置了网站作者的详细信息。修改下面的内容来定义你自己的信息。\n[author] name = \u0026#34;名字在这\u0026#34; image = \u0026#34;profile.jpg\u0026#34; headline = \u0026#34;我是个好人\u0026#34; bio = \u0026#34;关于我的二三事\u0026#34; # 出现在每篇文章的作者卡片中 网站的图片需要防止在 assets 文件夹内。针对这一步，请将一张你的个人图片添加到这个文件夹，并命名为 profile.jpg。 你可以修改这个文件名，确保文件名和上面个人信息中 image 的参数值对应就行。如果你没有个人图片可用，你可以使用下面的图片继续教程。\nassets/profile.jpg\r最后一步是配置你的链接——社交媒体、GitHub 等等。该文件包含了所有支持的链接选项，不过他们被注释掉了。你可以将你希望展示的个人链接的配置项接触注释，也可以替换他们的展示顺序。\nparams.toml #\r这个文件是 Blowfish 的配置文件。大部分的视觉选项或自定义的选项可以通过它进行配置，它涵盖了 Blowfish 主题的多个功能特性。 对于本指南，我决定使用 background 布局，你也可以查看Blowfish主题其他的主页布局；同时使用了 Neon 颜色方案，你可以查看完整的颜色方案列表或者创建自己的颜色方案。\n将 image.jpg 文件添加到 assets 文件夹，它将会作为网站的背景。你可以挑选自己喜欢的，当然也可以用本指南中使用的这张图。\nassets/image.jpg\r现在让我们打开 params.toml 并开始配置。在这里我只会关注需要修改的值，不要再没看文档的情况下，删除此文件的其余部分。\n首先让我们确保上面提到的正确的颜色方案，开启图片优化，并设置默认背景图片。\ncolorScheme = \u0026#34;neon\u0026#34; disableImageOptimization = false defaultBackgroundImage = \u0026#34;image.jpg\u0026#34; # used as default for background images 接下来，让我们配置首页。我们选择了 background 布局，配置首页图片和最近文章。此外，可以使用 card view 卡片展示的方式来展现最新文章。最后让我们配置头部固定。\n[homepage] layout = \u0026#34;background\u0026#34; # valid options: page, profile, hero, card, background, custom homepageImage = \u0026#34;image.jpg\u0026#34; # used in: hero, and card showRecent = true showRecentItems = 6 showMoreLink = true showMoreLinkDest = \u0026#34;/posts/\u0026#34; cardView = true cardViewScreenWidth = false layoutBackgroundBlur = true # only used when layout equals background [header] layout = \u0026#34;fixed\u0026#34; 现在配置文章和列表页面的展示。下面是他们的配置。\n[article] showHero = true heroStyle = \u0026#34;background\u0026#34; showSummary = true showTableOfContents = true showRelatedContent = true relatedContentLimit = 3 [list] showCards = true groupByYear = false cardView = true 如果你再次运行hugo server，你会看到类似下面这张图的效果。 If you run hugo server again, you should see something like the image below.\n在你的网站中添加内容 #\r创建一个文件夹/content/posts，在这个文件夹下添加你的帖子或文章。这也是你在菜单所配置的所有文章的根目录。在这个文件夹内，让我们创建一个新目录并命名为 myfirstpost。在这个目录中创建一个index.md文件作为你的文章，同样也在这个目录中添加featured.jpg或featured.png作为文章的缩略图。 参考下面这个示例。文件中的前几行是扉页参数（Front Matter），它定义了 Hugo 如何展示文章，更多的参数可以参考这里。\n--- title: \u0026#34;我的第一篇帖子\u0026#34; date: 2023-08-14 draft: false summary: \u0026#34;这是网站的第一篇你帖子\u0026#34; tags: [\u0026#34;space\u0026#34;] --- ## 一个副标题 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi nibh nisl, vulputate eu lacus vitae, maximus molestie libero. Vestibulum laoreet, odio et sollicitudin sollicitudin, quam ligula tempus urna, sed sagittis eros eros ac felis. In tristique tortor vitae lacinia commodo. Mauris venenatis ultrices purus nec fermentum. Nunc sit amet aliquet metus. Morbi nisl felis, gravida ac consequat vitae, blandit eu libero. Curabitur porta est in dui elementum porttitor. Maecenas fermentum, tortor ac feugiat fringilla, orci sem sagittis massa, a congue risus ipsum vel massa. Aliquam sit amet nunc vulputate, facilisis neque in, faucibus nisl. 你可以创建其他文章，来查看和验证站点的效果。你的网站应该像下面的图片一样。 主页显示最近的文章，每篇文章通过相关部分自动关联其他文章，有标签聚合和全文搜索。\n发布它 #\r现在只剩下发布你的网站了。我将会使用 Firebase 作为托管服务——这是一个免费的替代方案，如果你创建了更复杂的东西，它提供了高级功能。前往 Firebase 创建一个新项目，然后我们切换到 CLI 终端，这将是配置 Firebase 更加简单。\n让我们安装 Firebase CLI 工具 —— 如果你不是 MacOS，请查看 Firebase安装指南。\nbrew install firebase 现在登录并为你的项目初始化firebase托管服务。\nfirebase login firebase init 选择托管并继续。\n按照下面的图片进行，这是我推荐的方式。确保设置了 GitHub actions 工作流文件。这将保证你的 GitHub 仓库一旦有变化，就会立刻同步部署。\n然而，这些文件不会立刻开始运行，因为 Hugo 需要额外的步骤来提前构建。将下面的代码复制并粘贴到 .github 文件夹，同时保留文件中 firebase 生成的projectId。\nfirebase-hosting-merge.yml #\r# This file was auto-generated by the Firebase CLI # https://github.com/firebase/firebase-tools name: Deploy to Firebase Hosting on merge \u0026#39;on\u0026#39;: push: branches: - main jobs: build_and_deploy: runs-on: ubuntu-latest steps: - name: Hugo setup uses: peaceiris/actions-hugo@v2.6.0 env: ACTIONS_ALLOW_UNSECURE_COMMANDS: \u0026#39;true\u0026#39; - name: Check out code into the Go module directory uses: actions/checkout@v4 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Build with Hugo env: # For maximum backward compatibility with Hugo modules HUGO_ENVIRONMENT: production HUGO_ENV: production run: hugo -E -F --minify -d public - name: Deploy Production uses: FirebaseExtended/action-hosting-deploy@v0 with: repoToken: \u0026#39;${{ secrets.GITHUB_TOKEN }}\u0026#39; firebaseServiceAccount: \u0026#39;${{ secrets.FIREBASE_SERVICE_ACCOUNT_BLOWFISH_TUTORIAL }}\u0026#39; channelId: live projectId: blowfish-tutorial firebase-hosting-pull-request.yml #\r# This file was auto-generated by the Firebase CLI # https://github.com/firebase/firebase-tools name: Deploy to Firebase Hosting on PR \u0026#39;on\u0026#39;: pull_request jobs: build_and_preview: if: \u0026#39;${{ github.event.pull_request.head.repo.full_name == github.repository }}\u0026#39; runs-on: ubuntu-latest steps: - name: Hugo setup uses: peaceiris/actions-hugo@v2.6.0 env: ACTIONS_ALLOW_UNSECURE_COMMANDS: \u0026#39;true\u0026#39; - name: Check out code into the Go module directory uses: actions/checkout@v4 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Build with Hugo env: # For maximum backward compatibility with Hugo modules HUGO_ENVIRONMENT: production HUGO_ENV: production run: hugo -E -F --minify -d public - name: Deploy preview uses: FirebaseExtended/action-hosting-deploy@v0 with: repoToken: \u0026#39;${{ secrets.GITHUB_TOKEN }}\u0026#39; firebaseServiceAccount: \u0026#39;${{ secrets.FIREBASE_SERVICE_ACCOUNT_BLOWFISH_TUTORIAL }}\u0026#39; expires: 30d channelId: preview-${{ github.event.number }} projectId: blowfish-tutorial 最后一步是将你的代码提交到 GitHub，提交成功后 GitHub actions 工作流将会自动触发，并构建和部署你的网站。\ngit add . git commit -m \u0026#34;add github actions workflows\u0026#34; git push 你的 GitHub 仓库中的 actions 模块，将会显示类似下图的内容。\n当所有步骤完成之后，你的 Firebase 控制台将会显示类似下图的内容，包括一个可以查看网站的链接。我在https://blowfish-tutorial.web.app/中运行了这个教程。 Once all the steps finish, your Firebase console should show something like the image below - including the links to see your app – I got a version of this tutorial running on https://blowfish-tutorial.web.app/.\n结论和下一步 #\r现在你有了主页的第一个版本。你可以在本地进行更改，只要你提交代码，将会自动展示在你的网站中。 那么接下来要做什么呢？我给你留了一下链接，相信会对你有所帮你，其它这些链接会让你获得灵感并了解更多 Blowfish 和 Hugo 的内容。 Now you have your first version of your homepage. You can make changes locally and once you commit your code they will automatically be reflected online. What shall you do next? I’ll leave you with some useful links to get you inspired and learn more about Blowfish and Hugo.\nhttps://blowfish.page/docs/ https://blowfish.page/docs/configuration/ https://blowfish.page/docs/shortcodes/ https://blowfish.page/examples/ https://blowfish.page/users/ https://gohugo.io/documentation/ ","date":"October 4, 2023","externalUrl":"https://n9o.xyz/posts/202310-blowfish-tutorial/","permalink":"/guides/202310-blowfish-tutorial/","section":"使用指南","summary":"一年前我创建了 Blowfish，这是一个为了打造我的个人主页而精心设计的 Hugo 主题。我决定将其作为一个开源项目。直到今天，Blowfish 已经变成了一个蓬勃发展的开源项目，在 GitHub 上拥有超过900个 star 和数百名用户。在本教程中，我将向你展示如何搭建并在几分钟内让你的网站运行起来。","title":"使用 Blowfish和 Hugo 构建你的主页","type":"guides"},{"content":"\rBlowfish 的使用指南和教程\r您是 Blowfish 的用户吗? 要将您自己编写的指南添加到此列表，请查看参考模板。\n本部分包含有关如何配置主题的各种指南。如果您是新用户，请查看 安装 指南或查看 示例 部分来了解 Blowfish 能做出什么效果的网页。\n","date":"October 4, 2023","externalUrl":null,"permalink":"/guides/","section":"使用指南","summary":"","title":"使用指南","type":"guides"},{"content":"","date":"October 4, 2023","externalUrl":null,"permalink":"/tags/%E6%8C%87%E5%8D%97/","section":"标签","summary":"","title":"指南","type":"tags"},{"content":"在你的文章中添加不同作者的简单示例。\n","date":"October 4, 2023","externalUrl":null,"permalink":"/authors/","section":"作者列表示例","summary":"","title":"作者列表示例","type":"authors"},{"content":"","date":"October 2, 2023","externalUrl":"https://blowfish-tutorial.web.app/","permalink":"/examples/blowfish-tutorial/_index.it/","section":"Showcase","summary":"","title":"Blowfish Tutorial","type":"examples"},{"content":"","date":"October 2, 2023","externalUrl":"https://blowfish-tutorial.web.app/","permalink":"/examples/blowfish-tutorial/","section":"Showcase","summary":"","title":"Blowfish Tutorial","type":"examples"},{"content":"","date":"October 2, 2023","externalUrl":"https://blowfish-tutorial.web.app/","permalink":"/examples/blowfish-tutorial/_index.ja/","section":"Showcase","summary":"","title":"Blowfish チュートリアル","type":"examples"},{"content":"\rSee what\u0026rsquo;s possible with Blowfish.\rThis section contains links to example templates and pages created using Blowfish to get you inspired.\n","date":"October 2, 2023","externalUrl":null,"permalink":"/examples/","section":"Showcase","summary":"","title":"Showcase","type":"examples"},{"content":"","date":"October 1, 2023","externalUrl":"https://github.com/nunocoracao/blowfish-tutorial","permalink":"/examples/repo-blowfish-tutorial/_index.it/","section":"Showcase","summary":"","title":"Blowfish Tutorial - Repo","type":"examples"},{"content":"","date":"October 1, 2023","externalUrl":"https://github.com/nunocoracao/blowfish-tutorial","permalink":"/examples/repo-blowfish-tutorial/","section":"Showcase","summary":"","title":"Blowfish Tutorial - Repo","type":"examples"},{"content":"","date":"October 1, 2023","externalUrl":"https://github.com/nunocoracao/blowfish-tutorial","permalink":"/examples/repo-blowfish-tutorial/_index.ja/","section":"Showcase","summary":"","title":"Blowfish チュートリアル - レポジトリ","type":"examples"},{"content":"","date":"November 7, 2022","externalUrl":"https://nunocoracao.github.io/blowfish_lite/","permalink":"/examples/blowfish-lite/_index.it/","section":"Showcase","summary":"","title":"Blowfish Lite","type":"examples"},{"content":"","date":"November 7, 2022","externalUrl":"https://nunocoracao.github.io/blowfish_lite/","permalink":"/examples/blowfish-lite/_index.ja/","section":"Showcase","summary":"","title":"Blowfish Lite","type":"examples"},{"content":"","date":"November 7, 2022","externalUrl":"https://nunocoracao.github.io/blowfish_lite/","permalink":"/examples/blowfish-lite/","section":"Showcase","summary":"","title":"Blowfish Lite","type":"examples"},{"content":"","date":"November 6, 2022","externalUrl":"https://nunocoracao.github.io/blowfish_artist/","permalink":"/examples/blowfish-artist/_index.it/","section":"Showcase","summary":"","title":"Blowfish Artist","type":"examples"},{"content":"","date":"November 6, 2022","externalUrl":"https://nunocoracao.github.io/blowfish_artist/","permalink":"/examples/blowfish-artist/_index.ja/","section":"Showcase","summary":"","title":"Blowfish Artist","type":"examples"},{"content":"","date":"November 6, 2022","externalUrl":"https://nunocoracao.github.io/blowfish_artist/","permalink":"/examples/blowfish-artist/","section":"Showcase","summary":"","title":"Blowfish Artist","type":"examples"},{"content":"","date":"November 6, 2022","externalUrl":"https://nunocoracao.github.io/blowfish_lowkey/","permalink":"/examples/blowfish-lowkey/_index.it/","section":"Showcase","summary":"","title":"Blowfish Lowkey","type":"examples"},{"content":"","date":"November 6, 2022","externalUrl":"https://nunocoracao.github.io/blowfish_lowkey/","permalink":"/examples/blowfish-lowkey/_index.ja/","section":"Showcase","summary":"","title":"Blowfish Lowkey","type":"examples"},{"content":"","date":"November 6, 2022","externalUrl":"https://nunocoracao.github.io/blowfish_lowkey/","permalink":"/examples/blowfish-lowkey/","section":"Showcase","summary":"","title":"Blowfish Lowkey","type":"examples"},{"content":"假装这里有一份第二位作者的简介。\n","date":"October 12, 2022","externalUrl":null,"permalink":"/authors/secondauthor/","section":"作者列表示例","summary":"","title":"Dummy Second Author","type":"authors"},{"content":"这是具有多个作者的文章的示例。\n","date":"October 12, 2022","externalUrl":null,"permalink":"/samples/multiple-authors/","section":"示例","summary":"如何使用多个作者的简单示例。","title":"多作者","type":"sample"},{"content":"\rBlowfish 让你的内容栩栩如生。 \u0026#x1f60d;\r本节包含一些示例页面，展示了Blowfish如何呈现不同类型的内容。你还可以参考标签页面的示例。\n旁注： 这个页面只是一个标准的Blowfish文章列表，并且已经配置了Hugo来生成一个 samples 内容类型并显示文章摘要。\n","date":"October 12, 2022","externalUrl":null,"permalink":"/samples/","section":"示例","summary":"","title":"示例","type":"samples"},{"content":"","date":"October 12, 2022","externalUrl":null,"permalink":"/tags/%E7%A4%BA%E4%BE%8B/","section":"标签","summary":"","title":"示例","type":"tags"},{"content":"","date":"October 12, 2022","externalUrl":null,"permalink":"/tags/%E4%BD%9C%E8%80%85/","section":"标签","summary":"","title":"作者","type":"tags"},{"content":"这是一个在你的文章使用缩略图的快速示例。\n如果你的文章目录看起来像这样： If your average directory for an article looks like this:\ncontent └── awesome_article.md 你需要将他从单个 markdown 文件更改为一个同名文件夹。创建一个与文章同名的目录，并在此目录中添加一个 index.md 文件。目录结构如下所示：\ncontent └── awesome_article └── featured.png 在文件夹内部，你可以添加一个 feature* 开头的特征图片（支持几乎所有格式，但推荐使用 .png 或 .jpg）。目录结构如下所示：\ncontent └── awesome_article ├── index.md └── featured.png 这将告诉 Blowfish 这篇文章有一个特征图片，这个图片可以在网站作为缩略图使用，也可以用于社交平台上的 oEmbed 卡片。 作为一个示例，你可以尝试将这篇文章的 URL 复制粘贴到一个可以显示 oEmbeds 的平台，如 Twitter、WhatsApp、Telegram等等。\n","date":"September 26, 2022","externalUrl":null,"permalink":"/samples/thumbnail_sample/","section":"示例","summary":"一个展示如何在你的文章中开始使用缩略图的快速示例。","title":"缩略图","type":"sample"},{"content":"","date":"September 26, 2022","externalUrl":null,"permalink":"/tags/%E7%BC%A9%E7%95%A5%E5%9B%BE/","section":"标签","summary":"","title":"缩略图","type":"tags"},{"content":"","date":"November 7, 2021","externalUrl":"https://github.com/nunocoracao/blowfish_lite/","permalink":"/examples/repo-blowfish-lite/_index.it/","section":"Showcase","summary":"","title":"Blowfish Lite - Repo","type":"examples"},{"content":"","date":"November 7, 2021","externalUrl":"https://github.com/nunocoracao/blowfish_lite/","permalink":"/examples/repo-blowfish-lite/","section":"Showcase","summary":"","title":"Blowfish Lite - Repo","type":"examples"},{"content":"","date":"November 7, 2021","externalUrl":"https://github.com/nunocoracao/blowfish_lite/","permalink":"/examples/repo-blowfish-lite/_index.ja/","section":"Showcase","summary":"","title":"Blowfish Lite - レポジトリ","type":"examples"},{"content":"","date":"November 6, 2021","externalUrl":"https://github.com/nunocoracao/blowfish_artist/","permalink":"/examples/repo-blowfish-artist/_index.it/","section":"Showcase","summary":"","title":"Blowfish Artist - Repo","type":"examples"},{"content":"","date":"November 6, 2021","externalUrl":"https://github.com/nunocoracao/blowfish_artist/","permalink":"/examples/repo-blowfish-artist/","section":"Showcase","summary":"","title":"Blowfish Artist - Repo","type":"examples"},{"content":"","date":"November 6, 2021","externalUrl":"https://github.com/nunocoracao/blowfish_artist/","permalink":"/examples/repo-blowfish-artist/_index.ja/","section":"Showcase","summary":"","title":"Blowfish Artist - レポジトリ","type":"examples"},{"content":"","date":"November 6, 2021","externalUrl":"https://github.com/nunocoracao/blowfish_lowkey/","permalink":"/examples/repo-blowfish-lowkey/_index.it/","section":"Showcase","summary":"","title":"Blowfish Lowkey - Repo","type":"examples"},{"content":"","date":"November 6, 2021","externalUrl":"https://github.com/nunocoracao/blowfish_lowkey/","permalink":"/examples/repo-blowfish-lowkey/","section":"Showcase","summary":"","title":"Blowfish Lowkey - Repo","type":"examples"},{"content":"","date":"November 6, 2021","externalUrl":"https://github.com/nunocoracao/blowfish_lowkey/","permalink":"/examples/repo-blowfish-lowkey/_index.ja/","section":"Showcase","summary":"","title":"Blowfish Lowkey - レポジトリ","type":"examples"},{"content":"","date":"November 6, 2020","externalUrl":"https://nunocoracao.github.io/blowfish_template/","permalink":"/examples/blowfish-template/_index.it/","section":"Showcase","summary":"","title":"Blowfish Template","type":"examples"},{"content":"","date":"November 6, 2020","externalUrl":"https://nunocoracao.github.io/blowfish_template/","permalink":"/examples/blowfish-template/","section":"Showcase","summary":"","title":"Blowfish Template","type":"examples"},{"content":"","date":"November 6, 2020","externalUrl":"https://github.com/nunocoracao/blowfish_template","permalink":"/examples/blowfish-template-repo/_index.it/","section":"Showcase","summary":"","title":"Blowfish Template - GitHub Repo","type":"examples"},{"content":"","date":"November 6, 2020","externalUrl":"https://github.com/nunocoracao/blowfish_template","permalink":"/examples/blowfish-template-repo/","section":"Showcase","summary":"","title":"Blowfish Template - GitHub Repo","type":"examples"},{"content":"","date":"November 6, 2020","externalUrl":"https://nunocoracao.github.io/blowfish_template/","permalink":"/examples/blowfish-template/_index.ja/","section":"Showcase","summary":"","title":"Blowfish テンプレート","type":"examples"},{"content":"","date":"November 6, 2020","externalUrl":"https://github.com/nunocoracao/blowfish_template","permalink":"/examples/blowfish-template-repo/_index.ja/","section":"Showcase","summary":"","title":"Blowfish テンプレート - GitHub レポジトリ","type":"examples"},{"content":"","date":"August 14, 2020","externalUrl":null,"permalink":"/tags/sample/","section":"标签","summary":"","title":"Sample","type":"tags"},{"content":"","date":"August 14, 2020","externalUrl":null,"permalink":"/tags/users/","section":"标签","summary":"","title":"Users","type":"tags"},{"content":"Real websites that are built with Blowfish. Check the full list in JSON format.\nBlowfish user? To add your site to this list, submit a pull request.\r","date":"August 14, 2020","externalUrl":null,"permalink":"/users/users/","section":"用户列表","summary":"","title":"Users","type":"users"},{"content":"Blowfish で構築された実際のウェブサイトです。すべてのウェブサイト一覧は JSON 形式 で閲覧可能です。\nBlowfish ユーザーですか? この一覧にあなたのサイトを加える際は、 pull request を送信 してください。\r","date":"August 14, 2020","externalUrl":null,"permalink":"/users/users/","section":"用户列表","summary":"","title":"ユーザー","type":"users"},{"content":"","date":"August 14, 2020","externalUrl":null,"permalink":"/tags/%E7%AE%80%E7%A0%81/","section":"标签","summary":"","title":"简码","type":"tags"},{"content":"Blowfish 内置了许多 FontAwesome 6 中的图标。你可以使用 图标部分或者图标短代码将这些图标包含在你的网站中。\n当然，Blowfish 完全支持自定义图标。只需要将自己的 SVG 文件放在 assets/icons/ 目录下即可。图标目录中的任何图标可以在整个主题中使用。为了实现自动填充颜色，每个 SVG 图标源码中必须添加 fill=\u0026quot;currentColor\u0026quot; 属性。\n下面是所有的内置图标及其名称。\n图标名称 预览 amazon apple bars bell blogger bluesky bomb bug check circle-info code codeberg \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\rcodepen comment dev discourse docker download dribbble edit email envelope expand eye facebook fire flickr fork foursquare ghost github gitlab globe goodreads google google-scholar graduation-cap hackernews hashnode heart-empty heart image instagram itch-io keybase kickstarter ko-fi \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\rlanguage lastfm lightbulb line link linkedin list location-dot lock mastodon medium microsoft moon mug-hot music orcid patreon paypal peertube pencil pgpkey phone pinterest pixelfed poo reddit researchgate rss rss-square scale-balanced search shield skull-crossbones slack snapchat soundcloud spotify stack-overflow star steam stripe substack sun tag telegram threads tiktok triangle-exclamation tumblr twitch twitter wand-magic-sparkles whatsapp x-twitter xing Xing xmark youtube ","date":"August 14, 2020","externalUrl":null,"permalink":"/samples/icons/","section":"示例","summary":"","title":"图标","type":"sample"},{"content":"","date":"August 14, 2020","externalUrl":null,"permalink":"/tags/%E5%9B%BE%E6%A0%87/","section":"标签","summary":"","title":"图标","type":"tags"},{"content":"这里有使用 Blowfish 构建的网站实例。点击这里以 JSON 形式查看完整列表。\n您也是 Blowfish 用户？ 提交 PR来把你的网站加入此列表。\r","date":"August 14, 2020","externalUrl":null,"permalink":"/users/","section":"用户列表","summary":"","title":"用户列表","type":"users"},{"content":"","date":"August 14, 2020","externalUrl":null,"permalink":"/tags/%E5%8F%8B%E9%93%BE/","section":"标签","summary":"","title":"友链","type":"tags"},{"content":"","date":"March 11, 2019","externalUrl":null,"permalink":"/tags/css/","section":"标签","summary":"","title":"Css","type":"tags"},{"content":"","date":"March 11, 2019","externalUrl":null,"permalink":"/tags/html/","section":"标签","summary":"","title":"Html","type":"tags"},{"content":"本文提供了可在 Blowfish 中使用的基本 Markdown 格式示例，还展示了如何加入一些基本 HTML 元素。\n标题 #\r以下 HTML 元素 \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; 表示六个级别的标题。 \u0026lt;h1\u0026gt; 是最高的标题级别，而 \u0026lt;h6\u0026gt; 是最低的。\nH1 #\rH2 #\rH3 #\rH4 #\rH5 #\rH6 #\r段落 #\rXerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\n块引用 #\r块引用表示从其他来源引用的内容，可以用于位于 footer 或 cite 元素内的引文，并且可以表示一些补充说明（例如注释和缩写）。\n没有参考链接的块引用 #\rTiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\n有参考链接的块引用 #\rDon\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\n表格 #\r表格不是核心 Markdown 规范的一部分，但 Hugo 支持渲染。\nName Age Bob 27 Alice 23 表格内内联 Markdown #\rItalics Bold Code italics bold code 代码块 #\r带反引号的代码块 #\r\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 缩进四个空格的代码块 #\r\u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt;\r\u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r带有 Hugo 内部高亮简码的代码块 #\r1 2 3 4 5 6 7 8 9 10 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 列表 #\r有序列表 #\rFirst item Second item Third item 无序列表 #\rList item Another item And another item 嵌套列表 #\rFruit Apple Orange Banana Dairy Milk Cheese 其他元素 — abbr、sub、sup、kbd、mark #\rGIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\n上述引文摘自 Rob Pike 在 2015 年 11 月 18 日 Gopherfest 期间的谈论“什么都没有”。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"March 11, 2019","externalUrl":null,"permalink":"/samples/markdown/","section":"示例","summary":"\u003cp\u003e本文提供了可在 Blowfish 中使用的基本 Markdown 格式示例，还展示了如何加入一些基本 HTML 元素。\u003c/p\u003e","title":"Markdown","type":"sample"},{"content":"","date":"March 11, 2019","externalUrl":null,"permalink":"/tags/markdown/","section":"标签","summary":"","title":"Markdown","type":"tags"},{"content":"","date":"March 10, 2019","externalUrl":null,"permalink":"/tags/gist/","section":"标签","summary":"","title":"Gist","type":"tags"},{"content":"","date":"March 10, 2019","externalUrl":null,"permalink":"/tags/twitter/","section":"标签","summary":"","title":"Twitter","type":"tags"},{"content":"","date":"March 10, 2019","externalUrl":null,"permalink":"/tags/vimeo/","section":"标签","summary":"","title":"Vimeo","type":"tags"},{"content":"","date":"March 10, 2019","externalUrl":null,"permalink":"/tags/youtube/","section":"标签","summary":"","title":"Youtube","type":"tags"},{"content":"Hugo 附带了几个用于丰富内容的内置简码，以及一个隐私配置 和一组干练的简码，支持各种社交媒体嵌入的静态窗口。\nYouTube #\r下面是一个使用内置 youtube 简码的示例。\nTwitter #\r此示例使用 x 简码来显示推文。它需要两个参数 user 和 id 。\n“In addition to being more logical, asymmetry has the advantage that its complete appearance is far more optically effective than symmetry.”\n— Jan Tschichold pic.twitter.com/gcv7SrhvJb\n\u0026mdash; Design Reviewed | Graphic Design History (@DesignReviewed) January 17, 2019 或者，tweet 简码可用于生成嵌入式的 Twitter 卡片。\nGist #\rgist 简码可用于嵌入 GitHub Gist。它需要两个参数：Gist 的用户名和 ID。\nVimeo #\rvimeo_simple 简码将生成一个嵌入式的 Vimeo 播放器。\n","date":"March 10, 2019","externalUrl":null,"permalink":"/samples/rich-content/","section":"示例","summary":"这是\u003cstrong\u003e简码\u003c/strong\u003e内容的示例。","title":"简码示例","type":"sample"},{"content":"","date":"March 10, 2019","externalUrl":null,"permalink":"/tags/%E9%9A%90%E7%A7%81/","section":"标签","summary":"","title":"隐私","type":"tags"},{"content":"","date":"March 9, 2019","externalUrl":null,"permalink":"/tags/%E6%8B%89%E4%B8%81%E8%AF%AD/","section":"标签","summary":"","title":"拉丁语","type":"tags"},{"content":"","date":"March 9, 2019","externalUrl":null,"permalink":"/tags/%E6%96%87%E6%9C%AC/","section":"标签","summary":"","title":"文本","type":"tags"},{"content":"Lorem est tota propiore conpellat pectoribus de pectora summo.\nRedit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\nExierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.\nComas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et Vagus elidunt #\rThe Van de Graaf Canon\nMane refeci capiebant unda mulcebat #\rVicta caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\nIubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.\nEurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides parte.\n","date":"March 9, 2019","externalUrl":null,"permalink":"/samples/placeholder-text/","section":"示例","summary":"\u003cp\u003eLorem est tota propiore conpellat pectoribus de pectora summo.\u003c/p\u003e","title":"文本占位符","type":"sample"},{"content":"","date":"March 8, 2019","externalUrl":null,"permalink":"/tags/katex/","section":"标签","summary":"","title":"Katex","type":"tags"},{"content":"","date":"March 8, 2019","externalUrl":null,"permalink":"/tags/%E6%95%B0%E5%AD%A6/","section":"标签","summary":"","title":"数学","type":"tags"},{"content":"KaTeX 可用于在文章中呈现数学表达式。\n如果您想要使用数学符号，Blowfish 会将 KaTeX 自动加入到您的项目中。只需在文章中包含 katex 短代码 即可。参考下面的例子：\n{{\u0026lt; katex \u0026gt;}} 该页面上的任何 KaTeX 语法都会自动渲染。使用支持的 TeX 函数 的在线参考来获取可用语法。\n内联表示法 #\r可以通过将表达式包装在 \\( 和 \\) 分隔符中来生成内联表示法。\n例如：\n% KaTeX inline notation Inline notation: \\(\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…\\) Inline notation: \\(\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…\\)\n表达式块 #\r可以使用 $$ 分隔符生成表达式块。这将在其 HTML 块中输出表达式。\n例如：\n% KaTeX block notation $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$ $$\r\\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } }\r$$","date":"March 8, 2019","externalUrl":null,"permalink":"/samples/mathematical-notation/","section":"示例","summary":"\u003cp\u003eKaTeX 可用于在文章中呈现数学表达式。\u003c/p\u003e","title":"数学表达式","type":"sample"},{"content":"","date":"March 6, 2019","externalUrl":null,"permalink":"/tags/mermaid/","section":"标签","summary":"","title":"Mermaid","type":"tags"},{"content":"","date":"March 6, 2019","externalUrl":null,"permalink":"/tags/%E8%A1%A8%E6%A0%BC/","section":"标签","summary":"","title":"表格","type":"tags"},{"content":"","date":"March 6, 2019","externalUrl":null,"permalink":"/tags/%E6%B5%81%E7%A8%8B%E5%9B%BE/","section":"标签","summary":"","title":"流程图","type":"tags"},{"content":"Blowfish 使用 mermaid 简码可以调用。Blowfish 会根据配置的 colorScheme 参数自动调用 Mermaid 生成流程图或者思维导图。\n有关更多详细信息，请参阅 Mermaid 简码 文档。\n下面的示例是从官方 Mermaid 文档 中选取的一小部分。您还可以在 GitHub 上查看页面源代码 查看书写方法。\n流程图 #\rgraph TD\rA[Christmas] --\u003e|Get money| B(Go shopping)\rB --\u003e C{Let me think}\rB --\u003e G[/Another/]\rC ==\u003e|One| D[Laptop]\rC --\u003e|Two| E[iPhone]\rC --\u003e|Three| F[Car]\rsubgraph Section\rC\rD\rE\rF\rG\rend\r时序图 #\rsequenceDiagram\rautonumber\rpar Action 1\rAlice-\u003e\u003eJohn: Hello John, how are you?\rand Action 2\rAlice-\u003e\u003eBob: Hello Bob, how are you?\rend\rAlice-\u003e\u003e+John: Hello John, how are you?\rAlice-\u003e\u003e+John: John, can you hear me?\rJohn--\u003e\u003e-Alice: Hi Alice, I can hear you!\rNote right of John: John is perceptive\rJohn--\u003e\u003e-Alice: I feel great!\rloop Every minute\rJohn--\u003eAlice: Great!\rend\r类图 #\rclassDiagram\rAnimal \"1\" \u003c|-- Duck\rAnimal \u003c|-- Fish\rAnimal \u003c--o Zebra\rAnimal : +int age\rAnimal : +String gender\rAnimal: +isMammal()\rAnimal: +mate()\rclass Duck{\r+String beakColor\r+swim()\r+quack()\r}\rclass Fish{\r-int sizeInFeet\r-canEat()\r}\rclass Zebra{\r+bool is_wild\r+run()\r}\r实体关系图 #\rerDiagram\rCUSTOMER }|..|{ DELIVERY-ADDRESS : has\rCUSTOMER ||--o{ ORDER : places\rCUSTOMER ||--o{ INVOICE : \"liable for\"\rDELIVERY-ADDRESS ||--o{ ORDER : receives\rINVOICE ||--|{ ORDER : covers\rORDER ||--|{ ORDER-ITEM : includes\rPRODUCT-CATEGORY ||--|{ PRODUCT : contains\rPRODUCT ||--o{ ORDER-ITEM : \"ordered in\"\r","date":"March 6, 2019","externalUrl":null,"permalink":"/samples/diagrams-flowcharts/","section":"示例","summary":"使用 Mermaid 可以轻松地将图表和流程图添加到文章中。","title":"流程图和思维导图","type":"sample"},{"content":"Blowfish 使用 chart 简码来调用 Chart.js。Blowfish 会自动为图表设置主题以匹配配置的 colorScheme 参数，但是可以使用 Chart.js 语法来自定义图表颜色。\n有关更多详细信息，请参阅 图表简码 文档。\n下面的示例是从 Chart.js 官方文档 中选取的一小部分。您还可以在 GitHub 上查看页面源代码 查看书写方式。\n柱形图 #\r折线图 #\r扇形图 #\r","date":"March 6, 2019","externalUrl":null,"permalink":"/samples/charts/","section":"示例","summary":"Blowfish 包含 Chart.js，可实现强大的图表和数据可视化。","title":"图表","type":"sample"},{"content":"","date":"March 6, 2019","externalUrl":null,"permalink":"/tags/%E5%9B%BE%E7%89%87/","section":"标签","summary":"","title":"图片","type":"tags"},{"content":"","date":"March 5, 2019","externalUrl":null,"permalink":"/tags/emoji/","section":"标签","summary":"","title":"Emoji","type":"tags"},{"content":"Blowfish 支持 Emoji 表情符号。Emoji 表情符号可用于标题、菜单项和文章内容。\n注意: Emoji 的显示效果取决于您的浏览器和操作系统。要设置统一的表情符号样式，您可以使用第三方 Emoji 表情符号字体。\rBlowfish 会自动的进行表情符号渲染，因此您可以在内容和 frontmatter 中使用 Emoji 表情代码，它们将在构建时转换为相应的 Emoji。\n例如： see_no_evil \u0026#x1f648;, hear_no_evil \u0026#x1f649;, speak_no_evil \u0026#x1f64a;.\nEmoji 清单 可以很方便的查找 Emoji 对应的表情代码。\n","date":"March 5, 2019","externalUrl":null,"permalink":"/samples/emoji/","section":"示例","summary":"📖🏞️🧗🏽🐉🧙🏽‍♂️🧚🏽👸","title":"Emoji 表情符号 🪂","type":"sample"},{"content":"","date":"December 22, 1987","externalUrl":null,"permalink":"/tags/%E6%A8%A1%E6%9D%BF/","section":"标签","summary":"","title":"模板","type":"tags"},{"content":"感谢您愿意为 Blowfish 社区做出贡献。\n如何开始？ #\r这是一篇模板文章，将解释如何为 Blowfish 的指南部分创建新文章。\nClone Blowfish 仓库 #\r使用以下命令 clone 此仓库：\ngit clone https://github.com/nunocoracao/blowfish.git 配置您的文档 #\r复制并粘贴您要创建的 .md 文档所在的整个文件夹。 使用 YYYYMM-\u0026lt;英文标题\u0026gt; 的格式（例如：200601-tutorial）命名文档，不允许有空格。\n编写您的指南 #\r编写您的指南 :)\n在 img 文件夹中储存图像并按下述格式引用它们：\n![]() Image caption\r提交 PR #\r提交您的 PR ，Blowfish 团队在这里提前感谢您对我们这个项目的贡献。\n","date":"December 22, 1987","externalUrl":null,"permalink":"/guides/template/","section":"使用指南","summary":"","title":"使用指南模板","type":"guides"},{"content":"2人目のダミー作者の素晴らしいダミープロフィールです。\n","externalUrl":null,"permalink":"/authors/secondauthor/_index.ja/","section":"作者列表示例","summary":"","title":"2人目のダミー作者","type":"authors"},{"content":"This is the advanced tag. Just like other listing pages in Blowfish, you can add custom content to individual taxonomy terms and it will be displayed at the top of the term listing. \u0026#x1f680;\nYou can also use these content pages to define Hugo metadata like titles and descriptions that will be used for SEO and other purposes.\n","externalUrl":null,"permalink":"/tags/advanced/_index.it/","section":"标签","summary":"","title":"Advanced","type":"tags"},{"content":"\rQuesta è una demo del layout background.\rCambia layout \u0026orarr;\rnpx blowfish-tools ","externalUrl":null,"permalink":"/_index.it/","section":"欢迎来到 Blowfish! 🎉","summary":"","title":"Benvenuti a Blowfish!","type":"page"},{"content":"\rこちらは background レイアウトのデモです。\rレイアウトを変更する\u0026orarr;\rnpx blowfish-tools ","externalUrl":null,"permalink":"/_index.ja/","section":"欢迎来到 Blowfish! 🎉","summary":"","title":"Blowfish へようこそ! 🎉","type":"page"},{"content":"\rBlowfish dà vita ai tuoi contenuti. \u0026#x1f60d;\rQuesta sezione contiene alcune pagine demo che mostrano come Blowfish esegue il rendering di diversi tipi di contenuto. Puoi anche vedere una pagina di esempio elenco tassonomia.\nNota a margine: Questa pagina è solo un elenco standard di articoli Blowfish e Hugo è stato configurato per generare un tipo di contenuto \u0026ldquo;campioni\u0026rdquo; e visualizzare riepiloghi degli articoli.\n","externalUrl":null,"permalink":"/samples/_index.it/","section":"示例","summary":"","title":"Campioni","type":"samples"},{"content":"","externalUrl":null,"permalink":"/tags/docs/","section":"标签","summary":"","title":"Docs","type":"tags"},{"content":"\rSemplice ma potente. Scopri come utilizzare Blowfish e le sue funzionalità.\rQuesta sezione contiene tutto ciò che devi sapere su Blowfish. Se sei nuovo, consulta la guida Installazione per iniziare o visita la sezione Esempi per vedere cosa può fare Blowfish.\n","externalUrl":null,"permalink":"/docs/_index.it/","section":"文档","summary":"","title":"Documenti","type":"docs"},{"content":"Un rapido esempio di come iniziare a utilizzare le tassonomie degli autori nei tuoi articoli.\n","externalUrl":null,"permalink":"/authors/_index.it/","section":"作者列表示例","summary":"","title":"Esempio di elenco di tassonomia degli autori","type":"authors"},{"content":"","externalUrl":null,"permalink":"/tags/firebase/","section":"标签","summary":"","title":"Firebase","type":"tags"},{"content":"","externalUrl":null,"permalink":"/tags/front-matter/","section":"标签","summary":"","title":"Front Matter","type":"tags"},{"content":"","externalUrl":null,"permalink":"/tags/github/","section":"标签","summary":"","title":"Github","type":"tags"},{"content":"","externalUrl":null,"permalink":"/tags/lead/","section":"标签","summary":"","title":"Lead","type":"tags"},{"content":"","externalUrl":null,"permalink":"/tags/netlify/","section":"标签","summary":"","title":"Netlify","type":"tags"},{"content":"La fantastica biografia di Nuno.\n","externalUrl":null,"permalink":"/authors/nunocoracao/_index.it/","section":"作者列表示例","summary":"","title":"Nuno Coraçao","type":"authors"},{"content":"Nuno の素晴らしいダミープロフィールです。\n","externalUrl":null,"permalink":"/authors/nunocoracao/_index.ja/","section":"作者列表示例","summary":"","title":"Nuno Coração","type":"authors"},{"content":"","externalUrl":null,"permalink":"/tags/partials/","section":"标签","summary":"","title":"Partials","type":"tags"},{"content":"\rRecipes, guides, and tutorials for Blowfish\rBlowfish user? To add your guide to this list, check the template.\nThis section contains guides for a variety of scenarios on how to configure your theme. If you\u0026rsquo;re new, check out the Installation guide to begin or visit the Samples section to see what Blowfish can do.\n","externalUrl":null,"permalink":"/guides/_index.it/","section":"使用指南","summary":"","title":"Recipes","type":"guides"},{"content":"La fantastica biografia fittizia di Dummy Second Author.\n","externalUrl":null,"permalink":"/authors/secondauthor/_index.it/","section":"作者列表示例","summary":"","title":"Secondo autore fittizio","type":"authors"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"\rSee what\u0026rsquo;s possible with Blowfish.\rThis section contains links to example templates and pages created using Blowfish to get you inspired.\n","externalUrl":null,"permalink":"/examples/_index.it/","section":"Showcase","summary":"","title":"Showcase","type":"examples"},{"content":"Blowfish ha il pieno supporto per le tassonomie Hugo e si adatterà a qualsiasi impostazione tassonomica. Gli elenchi di tassonomia come questo supportano anche il contenuto personalizzato da visualizzare sopra l\u0026rsquo;elenco dei termini.\nQuest\u0026rsquo;area può essere utilizzata per aggiungere testo descrittivo aggiuntivo a ciascuna tassonomia. Dai un\u0026rsquo;occhiata al tag avanzato di seguito per vedere come portare questo concetto ancora oltre.\n","externalUrl":null,"permalink":"/tags/_index.it/","section":"标签","summary":"","title":"Tag","type":"tags"},{"content":"\rBlowfish はあなたのコンテンツに命を宿します。\u0026#x1f60d;\rこのセクションは、 Blowfish で様々な種類のコンテンツをどのように表示するのかを紹介するデモページを含みます。例としては分類一覧ページも参考になります。\nサイドノート: このページは一般的な Blowfish のリストで、 Hugo が生成した samples コンテンツタイプと記事の要約を表示する様に設定しています。\n","externalUrl":null,"permalink":"/samples/_index.ja/","section":"示例","summary":"","title":"サンプル","type":"samples"},{"content":"\rBlowfish で何が出来るか見てみる。\rこのセクションはテンプレートの例やインスピレーションを得ることの出来る Blowfish を使用して作成されたページのリンクがあります。\n","externalUrl":null,"permalink":"/examples/_index.ja/","section":"Showcase","summary":"","title":"ショーケース","type":"examples"},{"content":"Blowfish は Hugo の分類システムを完全にサポートし、どのような分類システムの設定でも適合できます。このような分類システムのリストは、用語リストの上に表示されるカスタムコンテンツもサポートしています。\nこのエリアはそれぞれの分類システムに追加の説明をする時に利用します。以下の高度なタグを確認して、このコンセプトをさらに発展させる方法をご覧ください。\n","externalUrl":null,"permalink":"/tags/_index.ja/","section":"标签","summary":"","title":"タグ","type":"tags"},{"content":"\rシンプル、それでいて強力。 Blowfish の利用方法と特徴について学ぶ。\rこのセクションでは、Blowfish について知っておくべきことをすべて網羅しています。初めての方は、まずインストールガイドをご覧いただくか、サンプルセクションで Blowfish で何ができるかを確認してみてください。\n","externalUrl":null,"permalink":"/docs/_index.ja/","section":"文档","summary":"","title":"ドキュメント","type":"docs"},{"content":"\rBlowfish のためのレシピ、ガイド、チュートリアル\rBlowfish ユーザーですか? この一覧にあなたのガイドを加える際は、テンプレートを確認してください。\nこのセクションではあなたのテーマの設定方法する様々なシナリオを含んでいます。新しく作成する場合は、開始するためにインストールガイド、または Blowfish が何が出来るかサンプルセクションに訪れてください。\n","externalUrl":null,"permalink":"/guides/_index.ja/","section":"使用指南","summary":"","title":"レシピ","type":"guides"},{"content":"","externalUrl":null,"permalink":"/tags/%E5%AE%89%E8%A3%85/","section":"标签","summary":"","title":"安装","type":"tags"},{"content":"","externalUrl":null,"permalink":"/tags/%E7%8F%AD%E7%BA%A7/","section":"标签","summary":"","title":"班级","type":"tags"},{"content":"","externalUrl":null,"permalink":"/tags/%E5%8D%9A%E5%AE%A2/","section":"标签","summary":"","title":"博客","type":"tags"},{"content":"","externalUrl":null,"permalink":"/tags/%E5%B8%83%E5%B1%80/","section":"标签","summary":"","title":"布局","type":"tags"},{"content":"","externalUrl":null,"permalink":"/tags/%E9%83%A8%E7%BD%B2/","section":"标签","summary":"","title":"部署","type":"tags"},{"content":"","externalUrl":null,"permalink":"/series/%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/","section":"Series","summary":"","title":"部署教程","type":"series"},{"content":"","externalUrl":null,"permalink":"/tags/%E5%A4%A7%E5%AD%A6%E4%BF%B1%E4%B9%90%E9%83%A8%E7%BD%91%E7%AB%99/","section":"标签","summary":"","title":"大学俱乐部网站","type":"tags"},{"content":"","externalUrl":null,"permalink":"/tags/%E7%82%B9%E8%B5%9E%E9%87%8F/","section":"标签","summary":"","title":"点赞量","type":"tags"},{"content":"","externalUrl":null,"permalink":"/tags/%E7%94%B5%E5%AD%90%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E4%BA%BA%E5%91%98/","section":"标签","summary":"","title":"电子游戏开发人员","type":"tags"},{"content":"こちらは高度なタグです。 Blowfish の他のページの様に、個々の分類条項にカスタムコンテンツの追加やそれを条項リストの一番上に表示することが可能です。\u0026#x1f680;\nタイトルや説明など SEO や他の目的に利用するためのHugo のメタデータを定義するためにこれらのコンテンツページも利用可能です。\n","externalUrl":null,"permalink":"/tags/advanced/_index.ja/","section":"标签","summary":"","title":"高度なタグ","type":"tags"},{"content":"这是高级标记。类似其他 Blowfish 中的其他列表页面，你可以在分类列表页添加自定义内容，这部分内容会显示在顶部。\u0026#x1f680;\n你也可以用这些内容来定义 Hugo 的元数据，比如标题和描述。这些内容可以被用来增强 SEO 或其他目的。\n","externalUrl":null,"permalink":"/tags/advanced/","section":"标签","summary":"","title":"高级","type":"tags"},{"content":"","externalUrl":null,"permalink":"/tags/%E9%AB%98%E7%BA%A7/","section":"标签","summary":"","title":"高级","type":"tags"},{"content":"","externalUrl":null,"permalink":"/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/","section":"标签","summary":"","title":"个人博客","type":"tags"},{"content":"","externalUrl":null,"permalink":"/tags/%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/","section":"标签","summary":"","title":"个人网站","type":"tags"},{"content":"","externalUrl":null,"permalink":"/tags/%E5%85%AC%E5%8F%B8%E7%BD%91%E7%AB%99/","section":"标签","summary":"","title":"公司网站","type":"tags"},{"content":"","externalUrl":null,"permalink":"/tags/%E6%88%B7%E5%A4%96%E5%8D%9A%E5%AE%A2/","section":"标签","summary":"","title":"户外博客","type":"tags"},{"content":"","externalUrl":null,"permalink":"/tags/%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/","section":"标签","summary":"","title":"技术博客","type":"tags"},{"content":"","externalUrl":null,"permalink":"/tags/%E7%AE%80%E5%8E%86/","section":"标签","summary":"","title":"简历","type":"tags"},{"content":"","externalUrl":null,"permalink":"/tags/%E5%BB%BA%E6%A8%A1%E5%99%A8/","section":"标签","summary":"","title":"建模器","type":"tags"},{"content":"","externalUrl":null,"permalink":"/tags/%E6%BC%AB%E7%94%BB%E7%BD%91%E7%AB%99/","section":"标签","summary":"","title":"漫画网站","type":"tags"},{"content":"","externalUrl":null,"permalink":"/tags/%E5%86%85%E5%AE%B9/","section":"标签","summary":"","title":"内容","type":"tags"},{"content":"","externalUrl":null,"permalink":"/tags/%E9%85%8D%E7%BD%AE/","section":"标签","summary":"","title":"配置","type":"tags"},{"content":"","externalUrl":null,"permalink":"/tags/%E8%AF%84%E8%AE%BA/","section":"标签","summary":"","title":"评论","type":"tags"},{"content":"","externalUrl":null,"permalink":"/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/","section":"标签","summary":"","title":"人工智能","type":"tags"},{"content":"","externalUrl":null,"permalink":"/tags/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E4%BA%BA%E5%91%98/","section":"标签","summary":"","title":"软件开发人员","type":"tags"},{"content":"","externalUrl":null,"permalink":"/tags/%E5%95%86%E4%B8%9A%E7%BD%91%E7%AB%99/","section":"标签","summary":"","title":"商业网站","type":"tags"},{"content":"","externalUrl":null,"permalink":"/tags/%E4%B9%A6/","section":"标签","summary":"","title":"书","type":"tags"},{"content":"","externalUrl":null,"permalink":"/tags/%E6%95%B0%E5%AD%97%E8%8A%B1%E5%9B%AD/","section":"标签","summary":"","title":"数字花园","type":"tags"},{"content":"","externalUrl":null,"permalink":"/tags/%E7%BB%9F%E8%AE%A1%E6%9C%8D%E5%8A%A1/","section":"标签","summary":"","title":"统计服务","type":"tags"},{"content":"","externalUrl":null,"permalink":"/tags/%E6%8A%95%E8%B5%84%E7%BB%84%E5%90%88%E7%BD%91%E7%AB%99/","section":"标签","summary":"","title":"投资组合网站","type":"tags"},{"content":"","externalUrl":null,"permalink":"/tags/%E6%89%98%E7%AE%A1/","section":"标签","summary":"","title":"托管","type":"tags"},{"content":"","externalUrl":null,"permalink":"/tags/%E5%A8%83%E5%A8%83%E6%91%84%E5%BD%B1/","section":"标签","summary":"","title":"娃娃摄影","type":"tags"},{"content":"","externalUrl":null,"permalink":"/tags/%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87/","section":"标签","summary":"","title":"网站图标","type":"tags"},{"content":"\r了解如何使用简单而强大的 Blowfish。\r本章节包含了你需要了解的有关 Blowfish 的所有信息。如果你是新用户，请查阅安装 指南，或者访问示例 来了解 Blowfish 能做什么。\n","externalUrl":null,"permalink":"/docs/","section":"文档","summary":"","title":"文档","type":"docs"},{"content":"","externalUrl":null,"permalink":"/tags/%E6%96%87%E6%A1%A3/","section":"标签","summary":"","title":"文档","type":"tags"},{"content":"","externalUrl":null,"permalink":"/tags/%E6%96%87%E4%BB%B6%E5%A4%B9/","section":"标签","summary":"","title":"文件夹","type":"tags"},{"content":"","externalUrl":null,"permalink":"/tags/%E7%B3%BB%E5%88%97/","section":"标签","summary":"","title":"系列","type":"tags"},{"content":"","externalUrl":null,"permalink":"/tags/%E9%A1%B9%E7%9B%AE%E7%AB%99%E7%82%B9/","section":"标签","summary":"","title":"项目站点","type":"tags"},{"content":"","externalUrl":null,"permalink":"/tags/%E6%96%B0%E6%89%8B/","section":"标签","summary":"","title":"新手","type":"tags"},{"content":"","externalUrl":null,"permalink":"/tags/%E6%B8%B2%E6%9F%93%E5%99%A8/","section":"标签","summary":"","title":"渲染器","type":"tags"},{"content":"","externalUrl":null,"permalink":"/tags/%E5%AD%A6%E6%9C%AF%E7%95%8C/","section":"标签","summary":"","title":"学术界","type":"tags"},{"content":"","externalUrl":null,"permalink":"/tags/%E7%A0%94%E8%AE%A8%E4%BC%9A/","section":"标签","summary":"","title":"研讨会","type":"tags"},{"content":"","externalUrl":null,"permalink":"/tags/%E5%BA%94%E7%94%A8%E7%BD%91%E7%AB%99/","section":"标签","summary":"","title":"应用网站","type":"tags"},{"content":"","externalUrl":null,"permalink":"/tags/%E6%B8%B8%E6%88%8F%E7%BD%91%E7%AB%99/","section":"标签","summary":"","title":"游戏网站","type":"tags"},{"content":"","externalUrl":null,"permalink":"/tags/%E9%98%85%E8%AF%BB%E9%87%8F/","section":"标签","summary":"","title":"阅读量","type":"tags"},{"content":"あなたの記事で著者のタクソノミーを使う方法の簡単な例です。\n","externalUrl":null,"permalink":"/authors/_index.ja/","section":"作者列表示例","summary":"","title":"著者のタクソノミーリストの例","type":"authors"},{"content":"","externalUrl":null,"permalink":"/tags/%E9%87%8D%E8%A6%81%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%96%B0%E9%97%BB/","section":"标签","summary":"","title":"重要博客的新闻","type":"tags"},{"content":"","externalUrl":null,"permalink":"/tags/%E4%B8%BB%E9%A2%98%E4%BD%9C%E8%80%85/","section":"标签","summary":"","title":"主题作者","type":"tags"},{"content":"","externalUrl":null,"permalink":"/tags/%E4%B8%BB%E9%A1%B5/","section":"标签","summary":"","title":"主页","type":"tags"},{"content":"","externalUrl":null,"permalink":"/tags/%E7%BB%84%E7%BB%87%E7%BD%91%E7%AB%99/","section":"标签","summary":"","title":"组织网站","type":"tags"},{"content":"","externalUrl":null,"permalink":"/tags/%E4%BD%9C%E8%80%85%E7%BD%91%E7%AB%99/","section":"标签","summary":"","title":"作者网站","type":"tags"}]